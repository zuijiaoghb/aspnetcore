1、https://github.com/dotnet/aspnetcore
   https://github.com/dotnet/blazor-samples
   https://github.com/microsoft/fluentui-blazor
   https://learn.microsoft.com/zh-cn/ef/core/modeling/
   https://www.nuget.org/

   github Yuan1877008@
   
   fastgithub_win-x64
   
2、使用 Blazor 利用 ASP.NET Core 生成第一个 Web 应用
2.1、centos8 安装.NET8 SDK
在CentOS 8上安装.NET 8 SDK，您可以按照以下步骤操作：
启用.NET 8的官方Microsoft密钥和存储库。
安装.NET 8 SDK。
以下是具体的命令：
# 1. 设置Microsoft密钥和存储库
sudo rpm -Uvh https://packages.microsoft.com/config/centos/8/packages-microsoft-prod.rpm
# 2. 安装.NET SDK
sudo dnf install dotnet-sdk-8.0
sudo dnf install dotnet-sdk-9.0
执行上述命令后，.NET 8 SDK将在CentOS 8系统上安装。您可以通过运行dotnet --version来验证安装是否成功。

2.2、创建应用
在终端中，运行以下命令来创建应用:
Command prompt
dotnet new blazor -o BlazorApp
此命令创建新 Blazor Web 应用项目，并将其放置在当前位置内名为 BlazorApp 的新目录中。
导航到由上一条命令创建的新 BlazorApp 目录:
Command prompt
cd BlazorApp
快速查看 BlazorApp 目录的内容。
ls
BlazorApp 目录中已经创建了多个文件，为你提供一个可以运行的简单的 Blazor 应用。
Program.cs 是启动服务器以及在其中配置应用服务和中间件的应用的入口点。
在 Components 目录中:
App.razor 为应用的根组件。
Routes.razor 配置 Blazor 路由器。
Pages 目录包含应用的一些示例网页。
BlazorApp.csproj 定义应用项目及其依赖项。
Properties 目录中的 launchSettings.json 文件为本地开发环境定义不同的配置文件设置。创建项目时会自动分配端口号并将其保存在此文件上。
请记下 BlazorApp 目录路径，因为教程后面会用到。
如果一切正常，请选择下面的 继续 按钮以转到下一步。

2.3、开放5246端口，并修改Properties 目录中的 launchSettings.json 文件里的http://localhost:5246为http://1.26:5246
[root@cpzljc BlazorApp]# firewall-cmd --list-port
[root@cpzljc BlazorApp]# firewall-cmd --zone=public --add-port=5246/tcp --permanent
[root@cpzljc BlazorApp]# systemctl restart firewalld
[root@cpzljc BlazorApp]# firewall-cmd --list-port

2.4、 运行应用
在终端中，运行以下命令:
Command prompt
dotnet watch
dotnet watch 命令将生成并启动应用，然后在每次更改代码时更新应用。可以选择Ctrl+C，以随时停止应用。
等待应用显示正在侦听 http://localhost:<port number> 然后打开浏览器并导航到该地址。
转到以下页面后，你已成功运行了第一个 Blazor 应用!
站点主页包含一些文本，并在左侧显示了多个选项卡，供你点击和浏览。

显示的页面由位于 Components/Pages 目录内的 Home.razor 文件定义。其内容如下所示:
Components/Pages/Home.razor
@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
它已包含将它设置为主页的代码，并显示文本Hello, world! 和 Welcome to your new app。PageTitle 组件会设置当前页面的标题，使其显示在浏览器选项卡中。

2.5、 ant-design-blazor  
https://github.com/ant-design-blazor/ant-design-blazor

https://github.com/MudBlazor/MudBlazor
https://mudblazor.com/
https://github.com/MudBlazor/Templates
https://github.com/CodeBeamOrg/CodeBeam.MudBlazor.Extensions
https://mudextensions.codebeam.org/

2.6、 Blazor for ASP.NET Web Forms开发人员电子书： https://learn.microsoft.com/zh-cn/dotnet/architecture/blazor-for-web-forms-developers/

2.7、 在centos8上安装visual studio code
在CentOS 8上安装Visual Studio Code可以通过以下步骤进行：
更新系统软件包列表：
sudo dnf update

安装必要的依赖：
sudo dnf install -y yum-utils

设置微软的软件仓库：
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo dnf config-manager --add-repo https://packages.microsoft.com/yumrepos/vscode
安装Visual Studio Code：
sudo dnf install -y code

安装完成后，你可以通过命令行启动Visual Studio Code，或者通过桌面环境的应用菜单查找并启动它。

3、 centos8 查询端口运行进程,关闭进程
在CentOS 8上，您可以使用ss或netstat命令来查找端口运行的进程，并使用kill命令来关闭进程。以下是具体的命令示例：

查询端口运行的进程：

# 使用ss命令查找特定端口（例如：8080）的进程
ss -ltnp | grep ':8080'
 
# 或者使用netstat命令
netstat -ltnp | grep ':8080'
关闭端口运行的进程：

# 假设查询结果显示进程ID为1234
kill 1234
 
# 如果进程不响应，可以使用强制选项
kill -9 1234
请确保您有足够的权限执行这些操作，通常需要root权限。如果没有，请使用sudo前缀来提升权限。

4、 /opt/aspnetcore/BlazorApp/DatabaseUtility.cs(1,17): error CS0234: 命名空间“Microsoft”中不存在类型或命名空间名“EntityFrameworkCore”(是否缺少程序集引用?) [/opt/aspnetcore/BlazorApp/BlazorApp.csproj]
-》 centos8 安装EntityFrameworkCore
在CentOS 8上安装EntityFrameworkCore，你需要使用.NET Core SDK。以下是安装EntityFrameworkCore的步骤：
安装.NET Core SDK：
访问官方.NET Core下载页面（https://dotnet.microsoft.com/download），选择CentOS 8的适当包进行安装。
安装完成后，打开终端并运行以下命令以安装EntityFrameworkCore包：
dotnet tool install --global dotnet-ef
使用以下命令来更新EntityFrameworkCore工具：
dotnet tool update --global dotnet-ef
在你的.NET Core项目中，使用以下命令来安装EntityFrameworkCore：
dotnet add package Microsoft.EntityFrameworkCore
如果你需要安装特定的数据库提供程序，比如Pomelo EntityFrameworkCore MySQL提供程序，你可以使用以下命令：
dotnet add package Pomelo.EntityFrameworkCore.MySql
请确保你的CentOS 8系统已经开启了网络连接，并且能够访问.NET Core的包管理服务。如果遇到任何依赖问题，请确保你的包管理器（如NuGet）是最新版本，并且已经正确配置。

5、 EntityFrameworkCore 连接mysql数据库的方法
在使用EntityFrameworkCore连接MySQL数据库时，你需要安装相应的数据库提供程序包。以下是安装和配置的步骤：

安装Pomelo.EntityFrameworkCore.MySql或MySql.Data.EntityFrameworkCore。

# 使用Pomelo提供程序
dotnet add package Pomelo.EntityFrameworkCore.MySql
# 或者使用官方MySQL提供程序
dotnet add package MySql.Data.EntityFrameworkCore
在你的appsettings.json或配置文件中添加数据库连接字符串。
{
  "ConnectionStrings": {
    "DefaultConnection": "server=localhost;port=3306;database=mydb;user=root;password=mypassword;"
  }
}
配置Startup.cs或你的配置类以使用MySQL提供程序。

public void ConfigureServices(IServiceCollection services)
{
    // 使用Pomelo提供程序
    services.AddDbContext<YourDbContext>(options =>
        options.UseMySql(Configuration.GetConnectionString("DefaultConnection")));
 
    // 或者使用官方MySQL提供程序
    services.AddDbContext<YourDbContext>(options =>
        options.UseMySql(Configuration.GetConnectionString("DefaultConnection"), new MySqlServerVersion(new Version(8, 0, 27))));
}
定义你的数据模型和DbContext。

public class YourDbContext : DbContext
{
    public YourDbContext(DbContextOptions<YourDbContext> options) : base(options)
    {
    }
 
    public DbSet<YourEntity> YourEntities { get; set; }
 
    // 其他DbSet定义...
}
 
public class YourEntity
{
    public int Id { get; set; }
    // 其他属性...
}
使用YourDbContext进行数据库操作。

public class YourRepository
{
    private readonly YourDbContext _context;
 
    public YourRepository(YourDbContext context)
    {
        _context = context;
    }
 
    public List<YourEntity> GetAll()
    {
        return _context.YourEntities.ToList();
    }
 
    // 其他方法...
}
以上步骤展示了如何使用EntityFrameworkCore连接MySQL数据库。记得替换示例代码中的YourDbContext, YourEntity, YourRepository和数据库连接字符串为你自己的上下文、实体和配置。


7、 
PS D:\> dotnet new install Microsoft.FluentUI.AspNetCore.Templates
PS D:\> dotnet new fluentblazor --name jtpjsapp  -au Individual
已成功创建模板“Fluent Blazor Web 应用”。
此模板包含除 Microsoft 以外其他方的技术，请参阅 https://aka.ms/aspnetcore/8.0-third-party-notices 以获取详细信息。

正在处理创建后操作...
正在还原 D:\jtpjsapp\jtpjsapp.csproj:
  正在确定要还原的项目…
  已还原 D:\jtpjsapp\jtpjsapp.csproj (用时 35.6 秒)。
已成功还原。	

PS D:\jtpjsapp> dotnet add package Microsoft.FluentUI.AspNetCore.Components.Icons
PS D:\jtpjsapp> dotnet add package Microsoft.FluentUI.AspNetCore.Components.Emoji

添加组件提供程序
在MainLayout.razor文件末尾添加以下组件。 关联服务使用这些提供程序来正确显示 Toast、对话框、工具提示或消息栏。
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />

将 DataGrid 组件与 EF Core 结合使用
如果要将 与 EF Core 提供的数据一起使用，则需要安装一个额外的包，以便网格知道如何异步解析查询以提高效率。.<FluentDataGrid>
安装
通过运行以下命令安装包：
dotnet add package Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter
用法
在您的Program.cs文件中，您需要在builder.Services.AddFluentUIComponents(...);行后添加以下内容：
builder.Services.AddDataGridEntityFrameworkAdapter();

PS D:\jtpjsapp\Components\Layout> vim .\MainLayout.razor
[root@cpzljc Layout]# cat MainLayout.razor
@inherits LayoutComponentBase
@inject IWebHostEnvironment Environment

<FluentLayout>
    @if (Environment.IsDevelopment()) {
    <FluentHeader>
       票据系统(开发环境)
        <FluentSpacer />
        <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="Account/Manage">@context.User.Identity?.Name</FluentNavLink>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                      @*  <input type="hidden" name="ReturnUrl" value="@currentUrl" /> *@
                        <input type="hidden" name="ReturnUrl" value="Account/Login" />
                        <FluentButton Type="ButtonType.Submit" Style="width: 100%;">注销</FluentButton>
                    </form>
                 </Authorized>
        </AuthorizeView>
    </FluentHeader>
    } else {
    <FluentHeader>
       票据系统
        <FluentSpacer />
        <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="Account/Manage">@context.User.Identity?.Name</FluentNavLink>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                      @*  <input type="hidden" name="ReturnUrl" value="@currentUrl" /> *@
                        <input type="hidden" name="ReturnUrl" value="Account/Login" />
                        <FluentButton Type="ButtonType.Submit" Style="width: 100%;">注销</FluentButton>
                    </form>
                 </Authorized>
        </AuthorizeView>
     </FluentHeader>
    }
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <AuthorizeView>
            <Authorized>
                <NavMenu />
            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
          <p> 江特电机 </p>
      @*  <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a> *@
        <FluentSpacer />
      @*  <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>*@
    </FluentFooter>

    <FluentToastProvider />
    <FluentDialogProvider @rendermode="RenderMode.InteractiveServer" />
    <FluentTooltipProvider />
    <FluentMessageBarProvider />
    <FluentMenuProvider />
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">??</a>
</div>


PS D:\jtpjsapp\Components\Layout> vim .\NavMenu.razor
[root@cpzljc Layout]# cat NavMenu.razor
@implements IDisposable

@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />       
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
           @* <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">首页</FluentNavLink>
            <FluentNavLink Href="counter" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Counter</FluentNavLink>
            <FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())" IconColor="Color.Accent">Weather</FluentNavLink>  *@
          @*  <FluentNavLink Href="auth" Icon="@(new Icons.Regular.Size20.LockClosedKey())" IconColor="Color.Accent">授权登录</FluentNavLink> *@
            <AuthorizeView>
                <Authorized>
                    @*
                    <FluentNavLink Href="Account/Manage">@context.User.Identity?.Name</FluentNavLink>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <input type="hidden" name="ReturnUrl" value="Account/Login" />
                        <FluentButton Type="ButtonType.Submit" Style="width: 100%;">注销</FluentButton>
                    </form>
                    *@
                    <FluentNavLink Href="recbill" Icon="@(new Icons.Regular.Size20.Money())" IconColor="Color.Accent">应收票据</FluentNavLink>
                    <FluentNavLink Href="motherRecbilllist" Icon="@(new Icons.Regular.Size20.List())"  IconColor="Color.Accent">应收票据母票列表</FluentNavLink>
                    <FluentNavLink Href="childRecbilllist" Icon="@(new Icons.Regular.Size20.TicketHorizontal())"  IconColor="Color.Accent">应收票据子票列表</FluentNavLink>
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="Account/Register">注册</FluentNavLink>
                    <FluentNavLink Href="Account/Login">登录</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


[root@cpzljc Components]# cat App.razor 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="jtpjsapp.styles.css" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <HeadOutlet />
</head>

<body>
    <Routes  @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage =>
        HttpContext.Request.Path.StartsWithSegments("/Account")
            ? null
            : InteractiveServer;
}


[root@cpzljc Components]# cat Routes.razor 
@using jtpjsapp.Components.Account.Shared
@inject NavigationManager NavigationManager

<Router AppAssembly="typeof(Program).Assembly">

        <Found Context="routeData">
             @if (NavigationManager.Uri.Contains("/Account/Login") || NavigationManager.Uri.Contains("/Account/Register") ) {
                 <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />      

                 <FocusOnNavigate RouteData="routeData" Selector="h1" />
             } else {
                  <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
                    <NotAuthorized>
                         <RedirectToLogin />
                    </NotAuthorized>
                 </AuthorizeRouteView>

                 <FocusOnNavigate RouteData="routeData" Selector="h1" />
             }

        </Found>
</Router>





[root@cpzljc Data]# cat RecBillModel.cs 
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace jtpjsapp.Data ;

//[Table("RecBillModels")]
[Index(nameof(TicketNumber), nameof(SubTicketNumber), IsUnique = true)]
public class RecBillModel
{

  public RecBillModel() {}

  public RecBillModel(DateTime dt, DateTime td, DateTime dd , DateTime addtime , DateTime modifytime) {
        this.RecDate = dt;
        this.TicketIssueDate = td;
        this.DueDate = dd;
        this.AddTime = addtime;
        this.ModifyTime = modifytime;
   }

   public int Id { get; set; }

   [Required]
   [Comment("收票日期")]
   public DateTime RecDate { get; set; }

    [Required]
    [StringLength(16,
        ErrorMessage = "Identifier too long (16 character limit).")]
    public string RecVoucher { get; set; }

    [Required]
    [MaxLength(100)]
    public string EntryName { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string RecBillCategory { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string FrontRela { get; set; }

    [Required]
        [StringLength(10,
        ErrorMessage = "Identifier too long (10 character limit).")]
    public string NewGeneration { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string TicketNumber { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string SubTicketNumber { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string IssuingUnit { get; set; }

    [Required]
        [StringLength(50,
        ErrorMessage = "Identifier too long (50 character limit).")]
    public string AcceptorName { get; set; }

    [Required]
        [StringLength(10,
        ErrorMessage = "Identifier too long (10 character limit).")]
    public string Is69 { get; set; }

    [Required]
   // [Column(TypeName = "decimal(10, 2)")]
    [Precision(14, 2)]
   // [Range(0.00001, 999999999999, ErrorMessage = "承兑金额要大于0。")]
    public decimal AcceptAmount { get; set; }

    [Required]
    public DateTime TicketIssueDate { get; set; }

    [Required]
    public DateTime DueDate { get; set; }

    public bool Selected { get; set; }

    // user ID from AspNetUser table.
    public string OwnerID { get; set; }

    [Required]
    public RecbillStatus Status { get; set; }

    [Required]
    public RecbillCompany Company { get; set; }

    public string? Endorser { get; set; }

    [Required]
    [Precision(14, 2)]
    public decimal Balance { get; set; }

    [Precision(14, 2)]
    public decimal? TransferAmount { get; set; }

    [Required]
    public DateTime AddTime { get; set; }

    public DateTime? ModifyTime { get; set; }


    [StringLength(10,
    ErrorMessage = "Identifier too long (10 character limit).")]
    public string IsMotherTicket { get; set; }

    /*
    [Range(1, 100000,
        ErrorMessage = "Accommodation invalid (1-100000).")]
    public int MaximumAccommodation { get; set; }


    [Required]
    [Range(typeof(bool), "true", "true",
        ErrorMessage = "This form disallows unapproved ships.")]
    public bool IsValidatedDesign { get; set; }

    [Required]
    public DateTime ProductionDate { get; set; }
    */
}

public enum RecbillStatus
{
    Submitted,
    Approved,
    Rejected
}

public enum RecbillCompany
{
   江特电机,
   江西江特,
   银锂新能源,
   杭州米格,
   天津华兴,
   宜丰锂业,
   泰昌矿业,
   江特电动车,
   江特客车厂,
   江特节能公司,
   江特高新装备公司,
   江特高新武汉分公司
}



[root@cpzljc Data]# cat RecBillDbContext.cs
using Microsoft.EntityFrameworkCore;

namespace jtpjsapp.Data;

public class RecBillDbContext : DbContext
{
    public DbSet<RecBillModel> RecBillModels { get; set; }
    //public DbSet<Post> Posts { get; set; }

    public RecBillDbContext(DbContextOptions<RecBillDbContext> options)
        : base(options)
    {
    }

}

[root@cpzljc Data]# cat ApplicationDbContext.cs 
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace jtpjsapp.Data;

public class ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : IdentityDbContext<ApplicationUser>(options)
{
    public DbSet<RecBillModel> RecBillModels { get; set; }

}


PS D:\jtpjsapp\Components\Pages> cp Counter.razor Recbill.razor
PS D:\jtpjsapp\Components> vim .\_Imports.razor
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.JSInterop
@using jtpjsapp
@using jtpjsapp.Components
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.EntityFrameworkCore
@using jtpjsapp.Data
@using jtpjsapp.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using ClosedXML.Excel
@using System.IO


PS D:\jtpjsapp\Components\Pages> vim .\Recbill.razor
@page "/recbill"
@rendermode InteractiveServer
@attribute [Authorize]

@implements IDisposable
@inject ILogger<RecBillModel> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IAuthorizationService AuthorizationService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>应收票据</PageTitle>
 <FluentStack>
 <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent" Disabled="@adddisabled"  OnClick="@addRecbillAsync" >新增母票</FluentButton>
    <FluentTextField  @bind-Value="ticketNumberOption"  Required="true"   Label="票号：" Minlength="1" Maxlength="50">    </FluentTextField>
    <FluentTextField  @bind-Value="subTicketNumberOption"  Required="true"   Label="子票号：" Minlength="1" Maxlength="50">    </FluentTextField>
 <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent" Disabled="@finddisabled"  OnClick="@FindRecBillByTicketNumberAndSubTicketNumber" >查询母票/子票</FluentButton>
 <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent" Disabled="@modifydisabled" OnClick="@modifyRecbllByTicketNumberAndSubTicketNumberAndId">修改</FluentButton>
 <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent" Disabled="@deletedisabled" OnClick="@deleteRecbllByTicketNumberAndSubTicketNumberAndId" >删除</FluentButton>
 </FluentStack>
<h1 style="text-align: center">应收票据</h1>
<EditForm  Model="recbill" OnValidSubmit="Submit" FormName="Recbill1">
    <DataAnnotationsValidator />
    <ValidationSummary />

  <FluentGrid Spacing="1" >
    <FluentGridItem lg="4">
         <FluentSelect TOption="RecbillCompany"
               Items=@(Enum.GetValues<RecbillCompany>() )
               Placeholder="选择单位..."
               OptionText="@(i => Enum.GetName(i))"
               OptionValue="@(i => ((int)(i)).ToString() )"
               @bind-Value="@recbillCompany"
               @bind-SelectedOption="@recbill.Company"
               Label="所属单位："
               Disabled="@formdisabled"
               Required="false" />
     </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
        收票日期:
        <br/>
       @* <FluentDatePicker  @bind-Value="recbill.RecDate" @bind-PickerMonth="recbill.RecDate" /> *@
       <InputDate  @bind-Value="recbill.RecDate"  Disabled="@formdisabled"  />
    </FluentLabel>
    </FluentGridItem>
    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.RecVoucher" Required="true"   Label="收票凭证号:" Minlength="1" Maxlength="16"   Disabled="@formdisabled" >
    </FluentTextField>
    </FluentGridItem>
    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.EntryName"  Required="true"   Label="项目名称（即前手单位）：" Minlength="1" Maxlength="50"  Disabled="@formdisabled" >
    </FluentTextField>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentSelect Items=@recBillCategoryOptions
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@recbill.RecBillCategory"
               Label="应收票据类别："
               Disabled="@formdisabled"
               Required="false" />
    </FluentGridItem>
    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.FrontRela"  Required="true"   Label="与前手的关系：" Minlength="1" Maxlength="16"  Disabled="@formdisabled" >    </FluentTextField>
    </FluentGridItem>
    <FluentGridItem lg="4">
         <FluentSelect Items=@newGenerationOptions
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@recbill.NewGeneration"
               Label="新一代："
               Disabled="@formdisabled"
               Required="false" />
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.TicketNumber"  Required="true"   Label="票号：" Minlength="1" Maxlength="50"  Disabled="@formdisabled" >    </FluentTextField>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.SubTicketNumber"  Required="true"   Label="子票号：" Minlength="1" Maxlength="50"  Disabled="@formdisabled" >    </FluentTextField>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.IssuingUnit"  Required="true"   Label="出票单位：" Minlength="1" Maxlength="50"  Disabled="@formdisabled" >    </FluentTextField>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.AcceptorName"  Required="true"   Label="承兑人名称：" Minlength="1" Maxlength="50"  Disabled="@formdisabled" >    </FluentTextField>
    </FluentGridItem>

    <FluentGridItem lg="4">
         <FluentSelect Items=@is69Options
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@recbill.Is69"
               Label="是否为6+9："
               Disabled="@formdisabled"
               Required="false" />
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
    承兑金额：
    <br/>
    <InputNumber  @bind-Value="recbill.AcceptAmount"  Disabled="@formdisabled" />
    </FluentLabel>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
    余额：
    <br/>
    <InputNumber  @bind-Value="recbill.Balance"  Disabled="@childdisabled" />
    </FluentLabel>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
    转出金额：
    <br/>
    <InputNumber  @bind-Value="recbill.TransferAmount"  Disabled="@childdisabled" />
    </FluentLabel>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
        出票日:
        <br/>
       @* <FluentDatePicker  @bind-Value="recbill.RecDate" @bind-PickerMonth="recbill.RecDate" /> *@
       <InputDate  @bind-Value="recbill.TicketIssueDate"  Disabled="@formdisabled" />
    </FluentLabel>
    </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentLabel>
        到期日:
        <br/>
       @* <FluentDatePicker  @bind-Value="recbill.RecDate" @bind-PickerMonth="recbill.RecDate" /> *@
       <InputDate  @bind-Value="recbill.DueDate"  Disabled="@formdisabled"  />
    </FluentLabel>
   </FluentGridItem>

    <FluentGridItem lg="4">
    <FluentTextField  @bind-Value="recbill.Endorser"   Label="背书人："  Maxlength="100"  Disabled="@childdisabled" >
    </FluentTextField>
    </FluentGridItem>

   <FluentGridItem lg="4">
    <FluentLabel>
        新建时间:
        <br/>
       @* <FluentDatePicker  @bind-Value="recbill.RecDate" @bind-PickerMonth="recbill.RecDate" /> *@
       <InputDate  @bind-Value="recbill.AddTime"  Disabled="@foreverdisabled"  />
    </FluentLabel>
   </FluentGridItem>

   <FluentGridItem lg="4">
    <FluentLabel>
        修改时间:
        <br/>
       @* <FluentDatePicker  @bind-Value="recbill.RecDate" @bind-PickerMonth="recbill.RecDate" /> *@       
	   <InputDate  @bind-Value="recbill.ModifyTime"  Disabled="@foreverdisabled"  />
    </FluentLabel>
   </FluentGridItem>

    <FluentGridItem lg="4">
         <FluentSelect Items=@isMotherTicketOptions
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@recbill.IsMotherTicket"
               Label="母票/子票："
               Disabled="@foreverdisabled"
               Required="true" />
    </FluentGridItem>

    </FluentGrid>
    <br/>
  @* <button type="submit">提交</button> *@
   <FluentButton Type="ButtonType.Submit" Disabled="@submitdisabled"  Appearance="Appearance.Accent">保存</FluentButton>
    <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent" Disabled="@cansledisabled" OnClick="@cansleSubmit" >取消</FluentButton>

</EditForm>


@*
<div role="status" style="padding-bottom: 1em;">
    Current count: <FluentBadge Appearance="Appearance.Neutral">@currentCount</FluentBadge>
</div>

<FluentButton Appearance="Appearance.Accent" @onclick="IncrementCount">Click me</FluentButton>
*@

@code {
        private ApplicationDbContext? Context { get; set; }
        private bool Busy;

    private int currentCount = 0;
    private bool adddisabled = false;
    private bool finddisabled = false;
    private bool modifydisabled = true;
    private bool deletedisabled = true;
    private bool submitdisabled = true;
    private bool cansledisabled = true;
    private bool formdisabled = true;
    private bool ismodifybutton = false;
    private bool foreverdisabled = true;
    private bool motherdisabled = true;
    private bool childdisabled = true;

    private string ticketNumberOption;
    private string subTicketNumberOption;

    private string recbillCompany;


   // [SupplyParameterFromForm]
    private RecBillModel recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);

    static List<Option<string>> recBillCategoryOptions = new()
    {
        { new Option<string> { Value = "电子银行承兑汇票", Text = "电子银行承兑汇票" } },
        { new Option<string> { Value = "其他", Text = "其他" } }
    };

    static List<Option<string>> newGenerationOptions = new()
    {
        { new Option<string> { Value = "是", Text = "是" } },
        { new Option<string> { Value = "否", Text = "否" } }
    };

    static List<Option<string>> is69Options = new()
    {
        { new Option<string> { Value = "是", Text = "是" } },
        { new Option<string> { Value = "否", Text = "否" } }
    };

    /*
    static List<Option<string>> companyOptions = new()
    {
        { new Option<string> { Value = "1", Text = "江特电机" } },
        { new Option<string> { Value = "2", Text = "江西江特" } },
        { new Option<string> { Value = "3", Text = "银锂新能源" } },
        { new Option<string> { Value = "4", Text = "杭州米格" } },
        { new Option<string> { Value = "5", Text = "天津华兴" } },
        { new Option<string> { Value = "6", Text = "宜丰锂业" } },
        { new Option<string> { Value = "7", Text = "泰昌矿业" } },
        { new Option<string> { Value = "8", Text = "江特电动车" } },
         { new Option<string> { Value = "9", Text = "江特客车厂" } },
         { new Option<string> { Value = "10", Text = "江特节能公司" } },
         { new Option<string> { Value = "11", Text = "江特高新装备公司" } },
         { new Option<string> { Value = "12", Text = "江特高新武汉分公司" } }
    };
    */


    static List<Option<string>> isMotherTicketOptions = new()
    {
        { new Option<string> { Value = "母票", Text = "母票" } },
        { new Option<string> { Value = "子票", Text = "子票" } }
    };

    private void IncrementCount()
    {
        currentCount++;
    }

   protected override async Task OnInitializedAsync()
   {
           Busy = true;

           Context = DbFactory.CreateDbContext();

           Busy = false;

           await base.OnInitializedAsync();
           // ... 其他初始化代码
           recbillCompany = "1";
           recbill.Company = RecbillCompany.江西江特;
           recbill.RecBillCategory = "电子银行承兑汇票";
           recbill.NewGeneration = "是";
           recbill.Is69 = "是";
   }

    private  async Task  addRecbillAsync(){
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        recbill.OwnerID = UserManager.GetUserId(user);
        var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Create);
        if (!isAuthorized.Succeeded)
        {
            //return Forbid();
           var dialog = await DialogService.ShowErrorAsync("当前用户没有新建权限。" );
           var result = await dialog.Result;
        } else {
        formdisabled = false;
        submitdisabled = false;
        cansledisabled = false;
        ismodifybutton = false;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = true;
        recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now , DateTime.Now, DateTime.Now );
        recbillCompany = "1";
        recbill.Company = RecbillCompany.江西江特;
        recbill.RecBillCategory = "电子银行承兑汇票";
        recbill.NewGeneration = "是";
        recbill.Is69 = "是";
     }
    }

    private  void cansleSubmit(){
        if (ismodifybutton == false ) {
        formdisabled = true;
        submitdisabled = true;
        cansledisabled = true;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = false;
        recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
        }

        if (ismodifybutton == true ) {
        formdisabled = true;
        submitdisabled = true;
        cansledisabled = true;
        modifydisabled = false;
        deletedisabled = false;
        finddisabled = false;
        }
    }

    private async Task  modifyRecbllByTicketNumberAndSubTicketNumberAndId(){
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Update);
        if (!isAuthorized.Succeeded)
        {
           // return Forbid();
           var dialog = await DialogService.ShowErrorAsync("当前用户没有修改权限。" );
           var result = await dialog.Result;
        } else {
        formdisabled = false;
        submitdisabled = false;
        cansledisabled =false;
        ismodifybutton = true;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = true;
        Busy = false;
      }

    }

   private async Task  deleteRecbllByTicketNumberAndSubTicketNumberAndId() {
       var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
       var user = authState.User;

       var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Delete);
       if (!isAuthorized.Succeeded)
       {
               // return Forbid();
               var dialog = await DialogService.ShowErrorAsync("当前用户没有删除该数据权限。" );
               var result = await dialog.Result;
       } else {

       if (Busy) {
            return;
        }

            Busy = true;
        var dialog1 = await DialogService.ShowConfirmationAsync("确认删除吗?", "是", "否", "再次确认");
        var result1 = await dialog1.Result;
        bool canceled = result1.Cancelled;

        if (canceled == false) {
            int count = 0 ;

            try {
                 var recb = Context.RecBillModels.Single(b => b.TicketNumber == recbill.TicketNumber && b.SubTicketNumber== recbill.SubTicketNumber && b.Id==recbill.Id);
                 Context.RecBillModels.Remove(recb);
                 count = Context.SaveChanges();
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                var dialog = await DialogService.ShowErrorAsync("删除失败!该票据不存在。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                                Busy = false;
             }
             if (count>0) {
                var dialog = await DialogService.ShowSuccessAsync("删除成功！");
                var result = await dialog.Result;
                //canceled = result.Cancelled;
               submitdisabled = true;
               cansledisabled = true;
                modifydisabled = true;
                deletedisabled = true;
                recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);

                                Busy = false;
             }
        }

        if (canceled == true) {
              submitdisabled = true;
              cansledisabled = true;
        }

                Busy = false;
     }
   }

    private async Task  Submit()
    {
        Logger.LogInformation("收票日期 = {RecDate}", recbill?.RecDate);

        if (ismodifybutton == false) {
            if (Busy) {
                return;
            }
            Busy = true;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            recbill.OwnerID = UserManager.GetUserId(user);

            var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Create);
            if (!isAuthorized.Succeeded)
            {
               // return Forbid();
               var dialog = await DialogService.ShowErrorAsync("当前用户没有新建权限。" );
               var result = await dialog.Result;
            } else {

           int count = 0 ;

           try {
            if (recbill.AcceptAmount <= 0)
            {
             var dialog = await DialogService.ShowErrorAsync("承兑金额要大于0。" );
             var result = await dialog.Result;
            } else {
                 recbill.Status = RecbillStatus.Submitted;
                 recbill.Balance = recbill.AcceptAmount;
                 recbill.IsMotherTicket = "母票";
                 Context.RecBillModels.Add(recbill);
                 count = Context.SaveChanges();
            }
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                var dialog = await DialogService.ShowErrorAsync("保存失败!该票据已存在。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                finddisabled = false;
                modifydisabled = true;
                deletedisabled = true;
               submitdisabled = true;
               cansledisabled = true;
                formdisabled = true;
                                Busy = false;
             }
             if (count>0) {
                var dialog = await DialogService.ShowSuccessAsync("保存成功！");
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                finddisabled = false;
                modifydisabled = true;
                deletedisabled = true;
               submitdisabled = true;
               cansledisabled = true;
                formdisabled = true;
                recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
                                Busy = false;
             }
             }

                         Busy = false;
        }

       if (ismodifybutton == true) {
            if (Busy) {
                  return;
            }

           Busy = true;
           int count = 0 ;

           try {
            if (recbill.AcceptAmount <= 0)
            {
             var dialog = await DialogService.ShowErrorAsync("承兑金额要大于0。" );
             var result = await dialog.Result;
            } else {
                  var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                  var user = authState.User;

                  var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Update);
                  if (!isAuthorized.Succeeded)
                  {
                   // return Forbid();
                   var dialog = await DialogService.ShowErrorAsync("当前用户没有修改权限。" );
                   var result = await dialog.Result;
                  } else {
                var recb = Context.RecBillModels.Single(b => b.TicketNumber == recbill.TicketNumber && b.SubTicketNumber== recbill.SubTicketNumber && b.Id==recbill.Id);
                recb.RecDate = recbill.RecDate;
                recb.RecVoucher = recbill.RecVoucher;
                recb.EntryName = recbill.EntryName;
                recb.RecBillCategory = recbill.RecBillCategory;
                recb.FrontRela = recbill.FrontRela;
                recb.NewGeneration = recbill.NewGeneration;
                recb.IssuingUnit = recbill.IssuingUnit;
                recb.AcceptorName = recbill.AcceptorName;
                recb.Is69 = recbill.Is69;
                recb.AcceptAmount = recbill.AcceptAmount;
                recb.TicketIssueDate = recbill.TicketIssueDate;
                recb.DueDate = recbill.DueDate;
                recb.Company = recbill.Company;
                recb.ModifyTime = DateTime.Now;
                 count = Context.SaveChanges();
               }
            }
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                var dialog = await DialogService.ShowErrorAsync("保存失败。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                Busy = false;
             }
             if (count>0) {
                var dialog = await DialogService.ShowSuccessAsync("保存成功！");
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                submitdisabled = true;
                cansledisabled = true;
                modifydisabled = true;
                deletedisabled = true;
                finddisabled = false;
                recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
                Busy = false;
             }

          Busy = false;
        }
         Busy = false;
    }


    private async Task FindRecBillByTicketNumberAndSubTicketNumber()
    {
        if (Busy) {
            return;
        }

                Busy = true;
        modifydisabled = true;
        deletedisabled = true;

           if (ticketNumberOption is null || subTicketNumberOption is null) {
                var dialog = await DialogService.ShowErrorAsync("查询前请输入票号和子票号。" );
                var result = await dialog.Result;
                modifydisabled = true;
                deletedisabled = true;
            } else {
              try {
              RecBillModel recb =  Context.RecBillModels.Single(b => b.TicketNumber == ticketNumberOption && b.SubTicketNumber==subTicketNumberOption);
              recbill.Id=recb.Id;
              recbill.RecDate=recb.RecDate;
              recbill.RecVoucher=recb.RecVoucher;
              recbill.EntryName=recb.EntryName;
              recbill.RecBillCategory=recb.RecBillCategory;
              recbill.FrontRela=recb.FrontRela;
              recbill.NewGeneration=recb.NewGeneration;
              recbill.TicketNumber=recb.TicketNumber;
              recbill.SubTicketNumber=recb.SubTicketNumber;
              recbill.IssuingUnit=recb.IssuingUnit;
              recbill.AcceptorName=recb.AcceptorName;
              recbill.Is69=recb.Is69;
              recbill.AcceptAmount=recb.AcceptAmount;
              recbill.TicketIssueDate=recb.TicketIssueDate;
              recbill.DueDate=recb.DueDate;
              recbill.OwnerID=recb.OwnerID;
              recbill.Status=recb.Status;
              recbill.Company=recb.Company;
              recbillCompany = ((int)recb.Company).ToString();
              recbill.Endorser=recb.Endorser;
              recbill.Balance=recb.Balance;
              recbill.TransferAmount=recb.TransferAmount;
              recbill.AddTime=recb.AddTime;
              recbill.ModifyTime=recb.ModifyTime;
              recbill.IsMotherTicket=recb.IsMotherTicket;

              var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
              var user = authState.User;
              var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, recbill,
                                                        RecbillOperations.Read);
              if (!isAuthorized.Succeeded)
              {
                // return Forbid();
                recbill = new RecBillModel( DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now );
                var dialog = await DialogService.ShowErrorAsync("当前用户没有查询该数据的权限。" );
                var result = await dialog.Result;
                recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
              } else {
                  modifydisabled = false;
                  deletedisabled = false;
              }
            } catch (System.InvalidOperationException e ) {
                var dialog = await DialogService.ShowErrorAsync("该票据不存在。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
              modifydisabled = true;
              deletedisabled = true;
                          Busy = false;
             }
          }

                formdisabled = true;
                submitdisabled = true;
                cansledisabled = true;

                Busy = false;
     }

    public void Dispose()
    {
       Context?.Dispose();
    }

}


该示例还配置了数据库日志记录来显示生成的 SQL 查询。 这是在 appsettings.Development.json 中配置的：
PS D:\jtpjsapp> vim .\appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information"
    }
  },
  "Kestrel": {
    "Endpoints": {
      "MyHttpEndpoint": {
        "Url": "http://1.26:5200"
      }
    }
  }
}


PS D:\jtpjsapp> dotnet add package Pomelo.EntityFrameworkCore.MySql
必须将 dotnet ef 安装为全局工具或本地工具。 大多数开发人员偏向于使用以下命令将 dotnet ef 安装为全局工具：
.NET CLI
dotnet tool install --global dotnet-ef
[root@cpzljc jtpjsapp]# dotnet add package Microsoft.EntityFrameworkCore.Design


[root@cpzljc jtpjsapp]# cat Program.cs
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.FluentUI.AspNetCore.Components;
using jtpjsapp.Components;
using jtpjsapp.Components.Account;
using jtpjsapp.Data;
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using Microsoft.AspNetCore.Authorization;
using jtpjsapp.Authorization;
using static Microsoft.AspNetCore.Http.StatusCodes;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();
builder.Services.AddFluentUIComponents();
builder.Services.AddDataGridEntityFrameworkAdapter();

builder.Services.AddCascadingAuthenticationState();
builder.Services.AddScoped<IdentityUserAccessor>();
builder.Services.AddScoped<IdentityRedirectManager>();
builder.Services.AddScoped<AuthenticationStateProvider, IdentityRevalidatingAuthenticationStateProvider>();      

builder.Services.AddAuthentication(options =>
    {
        options.DefaultScheme = IdentityConstants.ApplicationScheme;
        options.DefaultSignInScheme = IdentityConstants.ExternalScheme;
    })
    .AddIdentityCookies();

//var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
//builder.Services.AddDbContext<ApplicationDbContext>(options =>
  //  options.UseSqlite(connectionString));
builder.Services.AddDbContextFactory<ApplicationDbContext>(opt =>
    opt.UseMySql("server=1.26;port=3306;database=jt_pjs;user=root;password=jtT0795,.,;" , new MySqlServerVersion(new Version(8, 0, 31)) )
        // The following three options help with debugging, but should
        // be changed or removed for production.
        .LogTo(Console.WriteLine, LogLevel.Information)
        .EnableSensitiveDataLogging()
        .EnableDetailedErrors() );
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddIdentityCore<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)      
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddSignInManager()
    .AddDefaultTokenProviders();

/*
builder.Services.AddAuthorization(options =>
    {
        options.FallbackPolicy = new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .Build();
    });
*/

builder.Services.AddAuthorization();


builder.Services.AddSingleton<IEmailSender<ApplicationUser>, IdentityNoOpEmailSender>();

// Authorization handlers.
builder.Services.AddScoped<IAuthorizationHandler,
                      RecbillIsOwnerAuthorizationHandler>();

builder.Services.AddSingleton<IAuthorizationHandler,
                      RecbillAdministratorsAuthorizationHandler>();

builder.Services.AddSingleton<IAuthorizationHandler,
                      RecbillManagerAuthorizationHandler>();

/*
builder.Services.AddHsts(options =>
{
    options.Preload = true;
    options.IncludeSubDomains = true;
    options.MaxAge = TimeSpan.FromDays(60);
    options.ExcludedHosts.Add("example.com");
    options.ExcludedHosts.Add("www.example.com");
});



builder.Services.AddHttpsRedirection(options =>
{
    options.RedirectStatusCode = Status307TemporaryRedirect;
    options.HttpsPort = 5246;
});
*/


var app = builder.Build();

using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<ApplicationDbContext>();
    context.Database.Migrate();
    // requires using Microsoft.Extensions.Configuration;
    // Set password with the Secret Manager tool.
    // dotnet user-secrets set SeedUserPW <pw>

    var testUserPw = builder.Configuration.GetValue<string>("SeedUserPW");

   await SeedData.Initialize(services, testUserPw);
}

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
     app.UseExceptionHandler("/Error", createScopeForErrors: true);
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
     app.UseHsts();
}

app.UseHttpsRedirection();

//app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

app.UseStaticFiles();
app.UseAntiforgery();

app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();

// Add additional endpoints required by the Identity /Account Razor components.
app.MapAdditionalIdentityEndpoints();

app.Run();


[root@cpzljc jtpjsapp]# dotnet ef migrations add InitialCreate
Build started...
Build succeeded.
warn: Microsoft.EntityFrameworkCore.Model.Validation[10400]
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
warn: 2024/9/21 11:43:15.825 CoreEventId.SensitiveDataLoggingEnabledWarning[10400] (Microsoft.EntityFrameworkCore.Infrastructure)
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
Done. To undo this action, use 'ef migrations remove'

[root@cpzljc jtpjsapp]# dotnet ef database update
Build started...
Build succeeded.


建议通过生成 SQL 脚本，将迁移部署到生产数据库。 此策略的优点包括：
可以检查 SQL 脚本的准确性；这一点很重要，因为将架构更改应用于生产数据库是一项可能导致数据丢失的潜在危险操作。
在某些情况下，可以根据生产数据库的特定需求调整这些脚本。
SQL 脚本可以与部署技术结合使用，甚至可以在 CI 过程中生成。
SQL 脚本可以提供给 DBA，并且可以单独管理和存档。
[root@cpzljc jtpjsapp]# dotnet ef migrations script
Build started...
Build succeeded.
warn: Microsoft.EntityFrameworkCore.Model.Validation[10400]
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
warn: 2024/9/21 14:26:50.263 CoreEventId.SensitiveDataLoggingEnabledWarning[10400] (Microsoft.EntityFrameworkCore.Infrastructure)
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
CREATE TABLE IF NOT EXISTS `__EFMigrationsHistory` (
    `MigrationId` varchar(150) CHARACTER SET utf8mb4 NOT NULL,
    `ProductVersion` varchar(32) CHARACTER SET utf8mb4 NOT NULL,
    CONSTRAINT `PK___EFMigrationsHistory` PRIMARY KEY (`MigrationId`)
) CHARACTER SET=utf8mb4;

START TRANSACTION;

ALTER DATABASE CHARACTER SET utf8mb4;

CREATE TABLE `RecBillModels` (
    `Id` int NOT NULL AUTO_INCREMENT,
    `RecDate` datetime(6) NOT NULL COMMENT '收票日期',
    `RecVoucher` varchar(16) CHARACTER SET utf8mb4 NOT NULL,
    `EntryName` varchar(100) CHARACTER SET utf8mb4 NOT NULL,
    `RecBillCategory` longtext CHARACTER SET utf8mb4 NOT NULL,
    `FrontRela` longtext CHARACTER SET utf8mb4 NOT NULL,
    `NewGeneration` longtext CHARACTER SET utf8mb4 NOT NULL,
    `TicketNumber` varchar(255) CHARACTER SET utf8mb4 NOT NULL,
    `SubTicketNumber` varchar(255) CHARACTER SET utf8mb4 NOT NULL,
    `IssuingUnit` longtext CHARACTER SET utf8mb4 NOT NULL,
    `AcceptorName` longtext CHARACTER SET utf8mb4 NOT NULL,
    `Is69` longtext CHARACTER SET utf8mb4 NOT NULL,
    `AcceptAmount` decimal(14,2) NOT NULL,
    `TicketIssueDate` datetime(6) NOT NULL,
    `DueDate` datetime(6) NOT NULL,
    CONSTRAINT `PK_RecBillModels` PRIMARY KEY (`Id`)
) CHARACTER SET=utf8mb4;

CREATE UNIQUE INDEX `IX_RecBillModels_TicketNumber_SubTicketNumber` ON `RecBillModels` (`TicketNumber`, `SubTicketNumber`);

INSERT INTO `__EFMigrationsHistory` (`MigrationId`, `ProductVersion`)
VALUES ('20240921034316_InitialCreate', '8.0.8');

COMMIT;

START TRANSACTION;

ALTER TABLE `RecBillModels` MODIFY COLUMN `TicketNumber` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `SubTicketNumber` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `RecBillCategory` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `NewGeneration` varchar(10) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `IssuingUnit` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `Is69` varchar(10) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `FrontRela` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `AcceptorName` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

INSERT INTO `__EFMigrationsHistory` (`MigrationId`, `ProductVersion`)
VALUES ('20240921054902_RecBillModel_stringlength_change', '8.0.8');

COMMIT;


[root@cpzljc jtpjsapp]# dotnet ef migrations list


[root@cpzljc jtpjsapp]# dotnet ef migrations script  InitialCreate   RecBillModel_stringlength_change
Build started...
Build succeeded.
warn: Microsoft.EntityFrameworkCore.Model.Validation[10400]
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
warn: 2024/9/21 14:31:27.243 CoreEventId.SensitiveDataLoggingEnabledWarning[10400] (Microsoft.EntityFrameworkCore.Infrastructure)
      Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.
START TRANSACTION;

ALTER TABLE `RecBillModels` MODIFY COLUMN `TicketNumber` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `SubTicketNumber` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `RecBillCategory` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `NewGeneration` varchar(10) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `IssuingUnit` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `Is69` varchar(10) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `FrontRela` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

ALTER TABLE `RecBillModels` MODIFY COLUMN `AcceptorName` varchar(50) CHARACTER SET utf8mb4 NOT NULL;

INSERT INTO `__EFMigrationsHistory` (`MigrationId`, `ProductVersion`)
VALUES ('20240921054902_RecBillModel_stringlength_change', '8.0.8');

COMMIT;


[root@cpzljc Pages]# vim MotherRecbillList.razor 
@page "/motherRecbilllist"
@rendermode InteractiveServer
@attribute [Authorize]

@implements IDisposable
@inject ILogger<RecBillModel> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IAuthorizationService AuthorizationService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>应收票据母票列表</PageTitle>
<h2>查询条件:</h2>
<FluentGrid Spacing="1" >
<FluentGridItem lg="2">
    <FluentLabel>
        收票日期:
        <br/>
        开始： <InputDate  @bind-Value="recbilllistRecDateStart" Size="20" />
        <br/>
        结束： <InputDate  @bind-Value="recbilllistRecDateEnd" Size="20" />
    </FluentLabel>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistIssuingUnit"    Label="出票单位：" Minlength="1" Maxlength="50"   >    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistAcceptorName"   Label="承兑人名称：" Minlength="1" Maxlength="50"  >    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistTicketNumber"     Label="票号：" Minlength="1" Maxlength="50">    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistSubTicketNumber"     Label="子票号：" Minlength="1" Maxlength="50">    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent"  OnClick="@FindRecbillList" >查询</FluentButton>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@SplitRecbillAsync">拆分</FluentButton>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@ExportExcelAsync">导出excel</FluentButton>
</FluentGridItem>
</FluentGrid>
<h1 style="text-align: center">应收票据母票列表</h1>

<div style="display: table; table-layout: fixed; width: 100%;">
<div style="overflow-x: auto;">
<FluentDataGrid Items="@recbills.AsQueryable()"  TGridItem="RecBillModel"  ResizableColumns="true"

                Pagination="@pagination" ShowHover="true"
>
    @*
    <TemplateColumn Tooltip="true" TooltipText="@(c => "拆分票据号： " + c.TicketNumber+"+" + c.SubTicketNumber)" Title="功能" Width="100px" Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
        <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@SplitRecbillAsync">拆分</FluentButton>
    </TemplateColumn>
   *@
    <SelectColumn TGridItem="RecBillModel"
                  SelectMode="DataGridSelectMode.Single"
                  SelectFromEntireRow="true"
                  @bind-SelectedItems="@SelectedItems" />
    <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title="序号" Width="60px" Align="Align.Center"  Tooltip="true"  />
    <PropertyColumn Property="@(p => p.Company)"  Sortable="true"  Title="所属单位"  Width="180px" Align="Align.Center" Tooltip="true"/>
    <PropertyColumn Property="@(p => p.RecDate)" Format="yyyy-MM-dd" Sortable="true"  Title="收票 日期"  Width="120px" Align="Align.Center" Tooltip="true" />
    <PropertyColumn Property="@(p => p.RecVoucher)"  Sortable="true"  Title="收票凭证号"  Width="140px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.EntryName)"  Sortable="true"  Title="项目名称（即前手单位）"  Width="250px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.RecBillCategory)"  Sortable="true"  Title="应收票据类别"  Width="180px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.FrontRela)"  Sortable="true"  Title="与前手的关系"  Width="180px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.NewGeneration)"  Sortable="true"  Title="新一代"  Width="80px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.TicketNumber)"  Sortable="true"  Title="票号" Width="260px"  Align="Align.Center"  Tooltip="true" />
        <PropertyColumn Property="@(p => p.SubTicketNumber)"  Sortable="true"  Title="子票号"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.IssuingUnit)"  Sortable="true"  Title="出票单位"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AcceptorName)"  Sortable="true"  Title="承兑人名称"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Is69)"  Sortable="true"  Title="是否6+9"  Width="100px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AcceptAmount)"  Sortable="true"  Title="承兑金额"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Balance)"  Sortable="true"  Title="余额"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.TicketIssueDate)"  Format="yyyy-MM-dd"  Sortable="true"  Title="出票日"  Width="120px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.DueDate)"  Format="yyyy-MM-dd"  Sortable="true"  Title="到期日"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AddTime)"  Format="yyyy-MM-dd"  Sortable="true"  Title="新建时间"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.ModifyTime)"  Format="yyyy-MM-dd"  Sortable="true"  Title="修改时间"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.IsMotherTicket)"  Sortable="true"  Title="母票/子票"  Width="100px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Status)"  Sortable="true"  Title="状态"  Width="180px" Align="Align.Center" Tooltip="true"/>
</FluentDataGrid>
</div>
</div>

<FluentPaginator State="@pagination" />

@code {
        private ApplicationDbContext? Context { get; set; }
        private bool Busy;

        //private IQueryable<RecBillModel> recbills;
        private List<RecBillModel> recbills;
        PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
        IEnumerable<RecBillModel> SelectedItems;

        private DateTime recbilllistRecDateStart = DateTime.Now;
        private DateTime recbilllistRecDateEnd = DateTime.Now;
        private string recbilllistTicketNumber;
        private string recbilllistSubTicketNumber;
        private string recbilllistIssuingUnit;
        private string recbilllistAcceptorName;

        protected override async Task OnInitializedAsync()
       {
              Busy = true;

              Context = DbFactory.CreateDbContext();
              recbills  = Context.RecBillModels
                                                .Where(r => (recbilllistRecDateStart != DateTime.MinValue&& recbilllistRecDateEnd != DateTime.MinValue  && r.RecDate.Date >= recbilllistRecDateStart.Date  && r.RecDate.Date<= recbilllistRecDateEnd.Date) &&
                                                             (!string.IsNullOrEmpty(recbilllistTicketNumber) ? r.TicketNumber==recbilllistTicketNumber : true ) &&
                                                             (!string.IsNullOrEmpty(recbilllistSubTicketNumber) ? r.SubTicketNumber==recbilllistSubTicketNumber : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistIssuingUnit) ? r.IssuingUnit==recbilllistIssuingUnit : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistAcceptorName) ? r.AcceptorName==recbilllistAcceptorName : true) && r.IsMotherTicket=="母票" ).ToList();

               var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
               var user = authState.User;

               var isAuthorized = user.IsInRole(Recbills.RecbillManagersRole) ||
                                  user.IsInRole(Recbills.RecbillAdministratorsRole);

               var currentUserId = UserManager.GetUserId(user);

                if (!isAuthorized)
                {
                  recbills = recbills.Where(r => r.Status == RecbillStatus.Approved
                                            || r.OwnerID == currentUserId).ToList();
                }
             SelectedItems = recbills.AsQueryable().Where(p => p.Selected).ToList().AsQueryable();

            Busy = false;

       await base.OnInitializedAsync();
           // ... 其他初始化代码
       }

        private async Task FindRecbillList() {
              if (Busy) {
                  return;
              }

              Busy = true;
              try {
                  recbills = Context.RecBillModels
                                                 .Where(r => (recbilllistRecDateStart != DateTime.MinValue&& recbilllistRecDateEnd != DateTime.MinValue  && r.RecDate.Date >= recbilllistRecDateStart.Date  && r.RecDate.Date<= recbilllistRecDateEnd.Date) &&
                                                             (!string.IsNullOrEmpty(recbilllistTicketNumber) ? r.TicketNumber==recbilllistTicketNumber : true ) &&
                                                             (!string.IsNullOrEmpty(recbilllistSubTicketNumber) ? r.SubTicketNumber==recbilllistSubTicketNumber : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistIssuingUnit) ? r.IssuingUnit==recbilllistIssuingUnit : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistAcceptorName) ? r.AcceptorName==recbilllistAcceptorName : true) && r.IsMotherTicket=="母票" ).ToList();

               var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
               var user = authState.User;

               var isAuthorized = user.IsInRole(Recbills.RecbillManagersRole) ||
                                  user.IsInRole(Recbills.RecbillAdministratorsRole);

               var currentUserId = UserManager.GetUserId(user);

                if (!isAuthorized)
                {
                  recbills = recbills.Where(r => r.Status == RecbillStatus.Approved
                                            || r.OwnerID == currentUserId).ToList();
                }
            } catch (System.InvalidOperationException e ) {
                var dialog = await DialogService.ShowErrorAsync("查询票据列表异常。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                Busy = false;
             }

            Busy = false;
        }

     private async Task SplitRecbillAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        user, SelectedItems.FirstOrDefault(),
                                                        RecbillOperations.Split);
        if (!isAuthorized.Succeeded)
        {
            //return Forbid();
           var dialog = await DialogService.ShowErrorAsync("当前用户没有拆分该票据的权限。" );
           var result = await dialog.Result;
        } else {
         DialogParameters parameters = new()
         {
            Title = "拆分票据",
            Width = "500px",
            Height = "350px",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
         };

         if(SelectedItems.FirstOrDefault() is null) {
                var dialog = await DialogService.ShowErrorAsync("请先选择要拆分的票据。" );
                var result = await dialog.Result;
         } else {
                IDialogReference dialog = await DialogService.ShowDialogAsync<SplitRecbillDialog>(SelectedItems.FirstOrDefault(), parameters);
                DialogResult? result = await dialog.Result;

                if (!result.Cancelled && result.Data != null)
                {
                   List<RecBillModel> RecBillModelList = new ();
                   RecBillModelList.Add((RecBillModel)result.Data);
                   SelectedItems = RecBillModelList;
                }
         }
       }
     }

     private Stream GetFileStream()
     {
        var randomBinaryData = new byte[50 * 1024];
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
     }

     private async Task ExportExcelAsync() {
         using var workbook = new XLWorkbook();
         var worksheet = workbook.AddWorksheet("应收票据母票列表");
         worksheet.ColumnWidth = 12;
         //worksheet.Cell("A1").Value = "Hello World!";
         //worksheet.Cell("A2").FormulaA1 = "MID(A1, 7, 5)";
         worksheet.Cell("A1").InsertTable(recbills);
         worksheet.Cell("A1").Value = "序号";
         worksheet.Cell("B1").Value = "收票日期";
         worksheet.Cell("C1").Value = "收票凭证号";
         worksheet.Cell("D1").Value = "项目名称（即前手单位）";
         worksheet.Cell("E1").Value = "应收票据类别";
         worksheet.Cell("F1").Value = "与前手的关系";
         worksheet.Cell("G1").Value = "新一代";
         worksheet.Cell("H1").Value = "票号";
         worksheet.Cell("I1").Value = "子票号";
         worksheet.Cell("J1").Value = "出票单位";
         worksheet.Cell("K1").Value = "承兑人名称";
         worksheet.Cell("L1").Value = "是否6+9";
         worksheet.Cell("M1").Value = "承兑金额";
         worksheet.Cell("N1").Value = "出票日";
         worksheet.Cell("O1").Value = "到期日";
         worksheet.Cell("P1").Value = "是否选中";
         worksheet.Cell("Q1").Value = "用户ID";
         worksheet.Cell("R1").Value = "状态";
         worksheet.Cell("S1").Value = "所属单位";
         worksheet.Cell("T1").Value = "背书人";
         worksheet.Cell("U1").Value = "余额";
         worksheet.Cell("V1").Value = "转出金额";
         worksheet.Cell("W1").Value = "新建时间";
         worksheet.Cell("X1").Value = "修改时间";
         worksheet.Cell("Y1").Value = "母票/子票";
         worksheet.Columns().AdjustToContents();
         //workbook.SaveAs("/opt/aspnetcore/jtpjsapp/files/export/应收票据母票列表.xlsx");

         var fileStream = GetFileStream();
         workbook.SaveAs(fileStream);
         fileStream.Seek(0, SeekOrigin.Begin);
         var fileName = "应收票据母票列表.xlsx";

         using var streamRef = new DotNetStreamReference(stream: fileStream);

         await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
     }

    public void Dispose()
    {
         Context?.Dispose();
    }

}


[root@cpzljc Pages]# vim SplitRecbillDialog.razor
@implements IDialogContentComponent<RecBillModel>
@using System.ComponentModel.DataAnnotations

@implements IDisposable
@inject ILogger<RecBillModel> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@attribute [Authorize]

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">保存</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">取消</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <p>当前票据的票据号: @Content.TicketNumber，子票据号:@Content.SubTicketNumber，承兑金额：@Content.AcceptAmount，余额：@Content.Balance。</p>
    <FluentTextField @bind-Value="@newSubTicketNumber" Required="true">拆分子票号：</FluentTextField>
    <FluentTextField @bind-Value="@Endorser" Required="true">背书人：</FluentTextField>
    <FluentNumberField @bind-Value="@SplitAcceptAmount" Required="true">转出金额:</FluentNumberField>
</FluentDialogBody>

@code {
    private ApplicationDbContext? Context { get; set; }
    private bool Busy;
    private int count;

    private decimal SplitAcceptAmount;
    private string newSubTicketNumber;
    private string Endorser;
    public RecBillModel newRecbill = new RecBillModel();

    [Parameter]
    public RecBillModel Content { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
          Busy = true;

          Context = DbFactory.CreateDbContext();

          Busy = false;

        await base.OnInitializedAsync();
        // ... 其他初始化代码
    }

    private async Task SaveAsync()
    {
        if (Busy) {
            return;
        }

        Busy=true;
        try {
            if (newSubTicketNumber is null) {
                var dialog = await DialogService.ShowErrorAsync("拆分子票号必填。" );
                var result = await dialog.Result;
            } else if (Endorser is null) {
                 var dialog = await DialogService.ShowErrorAsync("背书人必填。" );
                 var result = await dialog.Result;
            } else if (SplitAcceptAmount > Content.Balance || SplitAcceptAmount<=0 || Content.Balance==0) {      
                 var dialog = await DialogService.ShowErrorAsync("转出金额要小于当前票据余额，且转出金额要大于0，且当前票据余额为0不能拆分。" );
                 var result = await dialog.Result;
            } else {
                   newRecbill.Company = Content.Company;
                   newRecbill.RecDate = Content.RecDate;
                   newRecbill.RecVoucher = Content.RecVoucher;
                   newRecbill.EntryName = Content.EntryName;
                   newRecbill.RecBillCategory = Content.RecBillCategory;
                   newRecbill.FrontRela = Content.FrontRela;
                   newRecbill.NewGeneration = Content.NewGeneration;
                   newRecbill.TicketNumber = Content.TicketNumber;
                   newRecbill.SubTicketNumber = newSubTicketNumber;
                   newRecbill.IssuingUnit = Content.IssuingUnit;
                   newRecbill.AcceptorName = Content.AcceptorName;
                   newRecbill.Is69 = Content.Is69;
                   newRecbill.AcceptAmount = Content.AcceptAmount;
                   newRecbill.TransferAmount = SplitAcceptAmount;
                   newRecbill.Balance = Content.Balance - SplitAcceptAmount;
                   newRecbill.TicketIssueDate = Content.TicketIssueDate;
                   newRecbill.DueDate = Content.DueDate;
                   newRecbill.Endorser = Endorser;
                   newRecbill.AddTime = DateTime.Now;
                   newRecbill.ModifyTime = DateTime.Now;
                   newRecbill.IsMotherTicket = "子票";
                   newRecbill.OwnerID = Content.OwnerID;
                   newRecbill.Status = RecbillStatus.Submitted;
                   Context.RecBillModels.Add(newRecbill);
                   count = Context.SaveChanges();

                   try {
                       var recb = Context.RecBillModels.Single(b => b.TicketNumber == Content.TicketNumber && b.SubTicketNumber== Content.SubTicketNumber && b.Id==Content.Id);
                       recb.Balance = recb.Balance - SplitAcceptAmount;
                       Content.Balance = recb.Balance - SplitAcceptAmount;
                       count = Context.SaveChanges();
                  } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                      var dialog = await DialogService.ShowErrorAsync("修改原票据承兑金额失败。" );
                      var result = await dialog.Result;
                      //canceled = result.Cancelled;
                      Busy = false;
                  }
            }
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                   var dialog = await DialogService.ShowErrorAsync("保存新票据失败!" );
                   var result = await dialog.Result;
                   //canceled = result.Cancelled;
                   Busy = false;
             }
             if (count>0) {
                 var dialog = await DialogService.ShowSuccessAsync("拆分成功！");
                 var result = await dialog.Result;
                 //canceled = result.Cancelled;
                 Busy = false;
              }

        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    public void Dispose()
    {
        // Context?.Dispose();
   }
}


[root@cpzljc Pages]# cat ChildRecbillList.razor
@page "/childRecbilllist"
@rendermode InteractiveServer
@attribute [Authorize]

@implements IDisposable
@inject ILogger<RecBillModel> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IAuthorizationService AuthorizationService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>应收票据子票列表</PageTitle>
<h2>查询条件:</h2>
<FluentGrid Spacing="1" >
<FluentGridItem lg="2">
    <FluentLabel>
        收票日期:
        <br/>
        开始： <InputDate  @bind-Value="recbilllistRecDateStart" Size="20" />
        <br/>
        结束： <InputDate  @bind-Value="recbilllistRecDateEnd" Size="20" />
    </FluentLabel>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistIssuingUnit"    Label="出票单位：" Minlength="1" Maxlength="50"   >    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistAcceptorName"   Label="承兑人名称：" Minlength="1" Maxlength="50"  >    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistTicketNumber"     Label="票号：" Minlength="1" Maxlength="50">    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentTextField  @bind-Value="recbilllistSubTicketNumber"     Label="子票号：" Minlength="1" Maxlength="50">    </FluentTextField>
</FluentGridItem>
<FluentGridItem lg="2">
    <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent"  OnClick="@FindRecbillList" >查询</FluentButton>
    <FluentButton Type="ButtonType.Button"  Appearance="Appearance.Accent"  OnClick="@ExportExcelAsync" >导出excel</FluentButton>
</FluentGridItem>
</FluentGrid>
<h1 style="text-align: center">应收票据子票列表</h1>

<div style="display: table; table-layout: fixed; width: 100%;">
<div style="overflow-x: auto;">
<FluentDataGrid Items="@recbills.AsQueryable()"  TGridItem="RecBillModel"  ResizableColumns="true"

                Pagination="@pagination" ShowHover="true"
>
    @*
    <TemplateColumn Tooltip="true" TooltipText="@(c => "拆分票据号： " + c.TicketNumber+"+" + c.SubTicketNumber)" Title="功能" Width="100px" Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
        <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@SplitRecbillAsync">拆分</FluentButton>
    </TemplateColumn>
   *@
    <SelectColumn TGridItem="RecBillModel"
                  SelectMode="DataGridSelectMode.Single"
                  SelectFromEntireRow="true"
                  @bind-SelectedItems="@SelectedItems" />
    <PropertyColumn Property="@(p => p.Id)" Sortable="true" Title="序号" Width="60px" Align="Align.Center"  Tooltip="true"  />
    <PropertyColumn Property="@(p => p.Company)"  Sortable="true"  Title="所属单位"  Width="180px" Align="Align.Center" Tooltip="true"/>
    <PropertyColumn Property="@(p => p.RecDate)" Format="yyyy-MM-dd" Sortable="true"  Title="收票 日期"  Width="120px" Align="Align.Center" Tooltip="true" />
    <PropertyColumn Property="@(p => p.RecVoucher)"  Sortable="true"  Title="收票凭证号"  Width="140px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.EntryName)"  Sortable="true"  Title="项目名称（即前手单位）"  Width="250px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.RecBillCategory)"  Sortable="true"  Title="应收票据类别"  Width="180px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.FrontRela)"  Sortable="true"  Title="与前手的关系"  Width="180px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.NewGeneration)"  Sortable="true"  Title="新一代"  Width="80px" Align="Align.Center" Tooltip="true" />
        <PropertyColumn Property="@(p => p.TicketNumber)"  Sortable="true"  Title="票号" Width="260px"  Align="Align.Center"  Tooltip="true" />
        <PropertyColumn Property="@(p => p.SubTicketNumber)"  Sortable="true"  Title="子票号"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.IssuingUnit)"  Sortable="true"  Title="出票单位"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AcceptorName)"  Sortable="true"  Title="承兑人名称"  Width="240px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Is69)"  Sortable="true"  Title="是否6+9"  Width="100px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AcceptAmount)"  Sortable="true"  Title="承兑金额"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Balance)"  Sortable="true"  Title="余额"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.TransferAmount)"  Sortable="true"  Title="转出金额"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.TicketIssueDate)"  Format="yyyy-MM-dd"  Sortable="true"  Title="出票日"  Width="120px" Align="Align.Center"  Tooltip="true"/>
        <PropertyColumn Property="@(p => p.DueDate)"  Format="yyyy-MM-dd"  Sortable="true"  Title="到期日"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.Endorser)"   Sortable="true"  Title="背书人"  Width="160px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.AddTime)"  Format="yyyy-MM-dd"  Sortable="true"  Title="新建时间"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.ModifyTime)"  Format="yyyy-MM-dd"  Sortable="true"  Title="修改时间"  Width="120px" Align="Align.Center" Tooltip="true"/>
        <PropertyColumn Property="@(p => p.IsMotherTicket)"  Sortable="true"  Title="母票/子票"  Width="100px" Align="Align.Center" Tooltip="true"/>
</FluentDataGrid>
</div>
</div>

<FluentPaginator State="@pagination" />

@code {
        private ApplicationDbContext? Context { get; set; }
        private bool Busy;

        //private IQueryable<RecBillModel> recbills;
        private List<RecBillModel> recbills;
        PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
        IEnumerable<RecBillModel> SelectedItems;

        private DateTime recbilllistRecDateStart = DateTime.Now;
        private DateTime recbilllistRecDateEnd = DateTime.Now;
        private string recbilllistTicketNumber;
        private string recbilllistSubTicketNumber;
        private string recbilllistIssuingUnit;
        private string recbilllistAcceptorName;

        protected override async Task OnInitializedAsync()
       {
              Busy = true;

              Context = DbFactory.CreateDbContext();
              recbills  = Context.RecBillModels
                                                .Where(r => (recbilllistRecDateStart != DateTime.MinValue&& recbilllistRecDateEnd != DateTime.MinValue  && r.RecDate.Date >= recbilllistRecDateStart.Date  && r.RecDate.Date<= recbilllistRecDateEnd.Date) &&
                                                             (!string.IsNullOrEmpty(recbilllistTicketNumber) ? r.TicketNumber==recbilllistTicketNumber : true ) &&
                                                             (!string.IsNullOrEmpty(recbilllistSubTicketNumber) ? r.SubTicketNumber==recbilllistSubTicketNumber : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistIssuingUnit) ? r.IssuingUnit==recbilllistIssuingUnit : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistAcceptorName) ? r.AcceptorName==recbilllistAcceptorName : true) && r.IsMotherTicket=="子票" ).ToList();

              var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
              var user = authState.User;

              var isAuthorized = user.IsInRole(Recbills.RecbillManagersRole) ||
                                 user.IsInRole(Recbills.RecbillAdministratorsRole);

              var currentUserId = UserManager.GetUserId(user);

              if (!isAuthorized)
              {
                  recbills = recbills.Where(r => r.Status == RecbillStatus.Approved
                                            || r.OwnerID == currentUserId).ToList();
              }

             SelectedItems = recbills.AsQueryable().Where(p => p.Selected).ToList().AsQueryable();

            Busy = false;

       await base.OnInitializedAsync();
           // ... 其他初始化代码
       }

        private async Task FindRecbillList() {
              if (Busy) {
                  return;
              }

              Busy = true;
              try {
                  recbills = Context.RecBillModels
                                                 .Where(r => (recbilllistRecDateStart != DateTime.MinValue&& recbilllistRecDateEnd != DateTime.MinValue  && r.RecDate.Date >= recbilllistRecDateStart.Date  && r.RecDate.Date<= recbilllistRecDateEnd.Date) &&
                                                             (!string.IsNullOrEmpty(recbilllistTicketNumber) ? r.TicketNumber==recbilllistTicketNumber : true ) &&
                                                             (!string.IsNullOrEmpty(recbilllistSubTicketNumber) ? r.SubTicketNumber==recbilllistSubTicketNumber : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistIssuingUnit) ? r.IssuingUnit==recbilllistIssuingUnit : true) &&
                                                             (!string.IsNullOrEmpty(recbilllistAcceptorName) ? r.AcceptorName==recbilllistAcceptorName : true) && r.IsMotherTicket=="子票" ).ToList();

              var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
              var user = authState.User;

              var isAuthorized = user.IsInRole(Recbills.RecbillManagersRole) ||
                                 user.IsInRole(Recbills.RecbillAdministratorsRole);
              var currentUserId = UserManager.GetUserId(user);

              if (!isAuthorized)
              {
                  recbills = recbills.Where(r => r.Status == RecbillStatus.Approved
                                            || r.OwnerID == currentUserId).ToList();
              }
            } catch (System.InvalidOperationException e ) {
                var dialog = await DialogService.ShowErrorAsync("查询票据列表异常。" );
                var result = await dialog.Result;
                //canceled = result.Cancelled;
                Busy = false;
             }

            Busy = false;
        }

       private Stream GetFileStream()
       {
        var randomBinaryData = new byte[50 * 1024];
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
       }

       private async Task ExportExcelAsync() {
         using var workbook = new XLWorkbook();
         var worksheet = workbook.AddWorksheet("应收票据子票列表");
         worksheet.ColumnWidth = 12;
         //worksheet.Cell("A1").Value = "Hello World!";
         //worksheet.Cell("A2").FormulaA1 = "MID(A1, 7, 5)";
         worksheet.Cell("A1").InsertTable(recbills);
         worksheet.Cell("A1").Value = "序号";
         worksheet.Cell("B1").Value = "收票日期";
         worksheet.Cell("C1").Value = "收票凭证号";
         worksheet.Cell("D1").Value = "项目名称（即前手单位）";
         worksheet.Cell("E1").Value = "应收票据类别";
         worksheet.Cell("F1").Value = "与前手的关系";
         worksheet.Cell("G1").Value = "新一代";
         worksheet.Cell("H1").Value = "票号";
         worksheet.Cell("I1").Value = "子票号";
         worksheet.Cell("J1").Value = "出票单位";
         worksheet.Cell("K1").Value = "承兑人名称";
         worksheet.Cell("L1").Value = "是否6+9";
         worksheet.Cell("M1").Value = "承兑金额";
         worksheet.Cell("N1").Value = "出票日";
         worksheet.Cell("O1").Value = "到期日";
         worksheet.Cell("P1").Value = "是否选中";
         worksheet.Cell("Q1").Value = "用户ID";
         worksheet.Cell("R1").Value = "状态";
         worksheet.Cell("S1").Value = "所属单位";
         worksheet.Cell("T1").Value = "背书人";
         worksheet.Cell("U1").Value = "余额";
         worksheet.Cell("V1").Value = "转出金额";
         worksheet.Cell("W1").Value = "新建时间";
         worksheet.Cell("X1").Value = "修改时间";
         worksheet.Cell("Y1").Value = "母票/子票";
         worksheet.Columns().AdjustToContents();
         //workbook.SaveAs("/opt/aspnetcore/jtpjsapp/files/export/应收票据母票列表.xlsx");

         var fileStream = GetFileStream();
         workbook.SaveAs(fileStream);
         fileStream.Seek(0, SeekOrigin.Begin);
         var fileName = "应收票据子票列表.xlsx";

         using var streamRef = new DotNetStreamReference(stream: fileStream);

         await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
     }


    public void Dispose()
    {
         Context?.Dispose();
    }

}


[root@cpzljc Data]# cd Migrations/
[root@cpzljc Migrations]# ls
00000000000000_CreateIdentitySchema.cs           ApplicationDbContextModelSnapshot.cs
00000000000000_CreateIdentitySchema.Designer.cs
[root@cpzljc Migrations]# cat 00000000000000_CreateIdentitySchema.cs
using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace jtpjsapp.Migrations
{
    /// <inheritdoc />
    public partial class CreateIdentitySchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: false),    
                    Name = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(150)", maxLength:150, nullable: false),     
                    UserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),       
                    NormalizedUserName = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: true),
                    Email = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    PasswordHash = table.Column<string>(type: "TEXT", nullable: true),
                    SecurityStamp = table.Column<string>(type: "TEXT", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumber = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        //.Annotation("Sqlite:Autoincrement", true)
                       .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    RoleId = table.Column<string>(type: "varchar(150)", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        //.Annotation("Sqlite:Autoincrement", true),
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "varchar(150)", nullable: false),
                    ProviderKey = table.Column<string>(type: "varchar(150)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "TEXT", nullable: true),
                    UserId = table.Column<string>(type: "varchar(32)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    RoleId = table.Column<string>(type: "varchar(150)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    LoginProvider = table.Column<string>(type: "varchar(150)", nullable: false),
                    Name = table.Column<string>(type: "varchar(150)", nullable: false),
                    Value = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}


[root@cpzljc Migrations]# cat 00000000000000_CreateIdentitySchema.Designer.cs 
// <auto-generated />
using System;
using jtpjsapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace jtpjsapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("00000000000000_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("jtpjsapp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        //.HasColumnType("TEXT")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


[root@cpzljc Migrations]# cat ApplicationDbContextModelSnapshot.cs 
// <auto-generated />
using System;
using jtpjsapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace jtpjsapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("jtpjsapp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("jtpjsapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


[root@cpzljc jtpjsapp]# dotnet user-secrets set SeedUserPW jtT0795,.,
Successfully saved SeedUserPW = jtT0795,., to the secret store.

[root@cpzljc Data]# vim SeedData.cs
[root@cpzljc Data]# cat SeedData.cs 
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using jtpjsapp.Authorization;

namespace jtpjsapp.Data;

public class SeedData {

public static async Task Initialize(IServiceProvider serviceProvider, string testUserPw)
{
    using (var context = new ApplicationDbContext(
        serviceProvider.GetRequiredService<DbContextOptions<ApplicationDbContext>>()))
    {
        // For sample purposes seed both with the same password.
        // Password is set with the following:
        // dotnet user-secrets set SeedUserPW <pw>
        // The admin user can do anything

        var adminID = await EnsureUser(serviceProvider, testUserPw, "admin@263.com");
        await EnsureRole(serviceProvider, adminID, Recbills.RecbillAdministratorsRole);

        // allowed user can create and edit contacts that they create
        var managerID = await EnsureUser(serviceProvider, testUserPw, "manager@263.com");
        await EnsureRole(serviceProvider, managerID, Recbills.RecbillManagersRole);

        SeedDB(context, adminID);
    }
}

private static async Task<string> EnsureUser(IServiceProvider serviceProvider,
                                            string testUserPw, string UserName)
{
   // var userManager = serviceProvider.GetService<UserManager<IdentityUser>>();
    var userManager = serviceProvider.GetService<UserManager<ApplicationUser>>();

    var user = await userManager.FindByNameAsync(UserName);
    if (user == null)
    {
        user = new ApplicationUser
        {
            UserName = UserName,
            EmailConfirmed = true
        };
        await userManager.CreateAsync(user, testUserPw);
    }

    if (user == null)
    {
        throw new Exception("密码强度太弱!");
    }

    return user.Id;
}

private static async Task<IdentityResult> EnsureRole(IServiceProvider serviceProvider,
                                                              string uid, string role)
{
    var roleManager = serviceProvider.GetService<RoleManager<IdentityRole>>();

    if (roleManager == null)
    {
        throw new Exception("roleManager null");
    }

    IdentityResult IR;
    if (!await roleManager.RoleExistsAsync(role))
    {
        IR = await roleManager.CreateAsync(new IdentityRole(role));
    }

    var userManager = serviceProvider.GetService<UserManager<ApplicationUser>>();

    //if (userManager == null)
    //{
    //    throw new Exception("userManager is null");
    //}

    var user = await userManager.FindByIdAsync(uid);

    if (user == null)
    {
        throw new Exception("The testUserPw password was probably not strong enough!");
    }

    IR = await userManager.AddToRoleAsync(user, role);

    return IR;
}

public static void SeedDB(ApplicationDbContext context, string adminID)
{
    if (context.RecBillModels.Any())
    {
        return;   // DB has been seeded
    }

    context.RecBillModels.AddRange(
        new RecBillModel
        {
            RecDate = DateTime.Now,
            RecVoucher = "2024-06-08#",
            EntryName = "江西江特电机有限公司",
            RecBillCategory = "电子银行承兑汇票",
            FrontRela = "合并范围内关联方",
            NewGeneration = "是",
            TicketNumber = "531665300002620240607001228939",
            SubTicketNumber = "000002576478000023235060",
                        IssuingUnit = "中冶赛迪工程技术股份有限公司",
                        AcceptorName = "浙商银行股份有限公司重庆分行",
                        Is69 = "是",
                        AcceptAmount = Convert.ToDecimal(206585.83),
                        TicketIssueDate = DateTime.Now,
                        DueDate = DateTime.Now,
                        Selected = false,
                        OwnerID = adminID,
                        Status = RecbillStatus.Approved,
                        Company = "江西江特电机有限公司",
                        Endorser = "",
                        Balance = Convert.ToDecimal(206585.83),
                        TransferAmount = 0,
                        AddTime = DateTime.Now,
                        ModifyTime = null,
                        IsMotherTicket = "是"
        }
        );

}

}


[root@cpzljc jtpjsapp]# mkdir Authorization
[root@cpzljc jtpjsapp]# ls
 appsettings.Development.json   Authorization   Components  'Data\app.db'      obj          Properties
 appsettings.json               bin             Data         jtpjsapp.csproj   Program.cs   wwwroot

 
[root@cpzljc Authorization]# vim RecbillIsOwnerAuthorizationHandler.cs
[root@cpzljc Authorization]# cat RecbillIsOwnerAuthorizationHandler.cs 
using jtpjsapp.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authorization.Infrastructure;
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;

namespace jtpjsapp.Authorization
{
    public class RecbillIsOwnerAuthorizationHandler
                : AuthorizationHandler<OperationAuthorizationRequirement, RecBillModel>
    {
       // UserManager<IdentityUser> _userManager;
       UserManager<ApplicationUser> _userManager;

        public RecbillIsOwnerAuthorizationHandler(UserManager<ApplicationUser>
            userManager)
        {
            _userManager = userManager;
        }

        protected override Task
            HandleRequirementAsync(AuthorizationHandlerContext context,
                                   OperationAuthorizationRequirement requirement,
                                   RecBillModel resource)
        {
            if (context.User == null || resource == null)
            {
                return Task.CompletedTask;
            }

            // If not asking for CRUD permission, return.

            if (requirement.Name != Recbills.CreateOperationName &&
                requirement.Name != Recbills.ReadOperationName   &&
                requirement.Name != Recbills.UpdateOperationName &&
                requirement.Name != Recbills.DeleteOperationName &&
                requirement.Name != Recbills.SplitOperationName
                )
            {
                return Task.CompletedTask;
            }

            if (resource.OwnerID == _userManager.GetUserId(context.User) || (resource.Status==RecbillStatus.Approved && requirement.Name==Recbills.ReadOperationName ) )
            {
                context.Succeed(requirement);
            }

            return Task.CompletedTask;
        }
    }
}


[root@cpzljc Authorization]# vim RecbillManagerAuthorizationHandler.cs
[root@cpzljc Authorization]# cat RecbillManagerAuthorizationHandler.cs 
using System.Threading.Tasks;
using jtpjsapp.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authorization.Infrastructure;
using Microsoft.AspNetCore.Identity;

namespace jtpjsapp.Authorization
{
    public class RecbillManagerAuthorizationHandler :
        AuthorizationHandler<OperationAuthorizationRequirement, RecBillModel>
    {
        protected override Task
            HandleRequirementAsync(AuthorizationHandlerContext context,
                                   OperationAuthorizationRequirement requirement,
                                   RecBillModel resource)
        {
            if (context.User == null || resource == null)
            {
                return Task.CompletedTask;
            }

            // If not asking for approval/reject, return.
            if (requirement.Name != Recbills.ApproveOperationName &&
                requirement.Name != Recbills.RejectOperationName)
            {
                return Task.CompletedTask;
            }

            // Managers can approve or reject.
            if (context.User.IsInRole(Recbills.RecbillManagersRole))
            {
                context.Succeed(requirement);
            }

            return Task.CompletedTask;
        }
    }
}


[root@cpzljc Authorization]# vim RecbillAdministratorsAuthorizationHandler.cs
[root@cpzljc Authorization]# cat RecbillAdministratorsAuthorizationHandler.cs 
using System.Threading.Tasks;
using jtpjsapp.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authorization.Infrastructure;

namespace jtpjsapp.Authorization
{
    public class RecbillAdministratorsAuthorizationHandler
                    : AuthorizationHandler<OperationAuthorizationRequirement, RecBillModel>
    {
        protected override Task HandleRequirementAsync(
                                              AuthorizationHandlerContext context,
                                    OperationAuthorizationRequirement requirement,
                                     RecBillModel resource)
        {
            if (context.User == null)
            {
                return Task.CompletedTask;
            }

            // Administrators can do anything.
            if (context.User.IsInRole(Recbills.RecbillAdministratorsRole))
            {
                context.Succeed(requirement);
            }

            return Task.CompletedTask;
        }
    }
}


[root@cpzljc Authorization]# vim RecbillOperations.cs
[root@cpzljc Authorization]# cat RecbillOperations.cs 
using Microsoft.AspNetCore.Authorization.Infrastructure;

namespace jtpjsapp.Authorization
{
    public static class RecbillOperations
    {
        public static OperationAuthorizationRequirement Create =
          new OperationAuthorizationRequirement {Name=Recbills.CreateOperationName};
        public static OperationAuthorizationRequirement Read =
          new OperationAuthorizationRequirement {Name=Recbills.ReadOperationName};
        public static OperationAuthorizationRequirement Update =
          new OperationAuthorizationRequirement {Name=Recbills.UpdateOperationName};
        public static OperationAuthorizationRequirement Delete =
          new OperationAuthorizationRequirement {Name=Recbills.DeleteOperationName};
        public static OperationAuthorizationRequirement Approve =
          new OperationAuthorizationRequirement {Name=Recbills.ApproveOperationName};
        public static OperationAuthorizationRequirement Reject =
          new OperationAuthorizationRequirement {Name=Recbills.RejectOperationName};
        public static OperationAuthorizationRequirement Split =
          new OperationAuthorizationRequirement {Name=Recbills.SplitOperationName};
    }

    public class Recbills
    {
        public static readonly string CreateOperationName = "Create";
        public static readonly string ReadOperationName = "Read";
        public static readonly string UpdateOperationName = "Update";
        public static readonly string DeleteOperationName = "Delete";
        public static readonly string ApproveOperationName = "Approve";
        public static readonly string RejectOperationName = "Reject";
        public static readonly string SplitOperationName = "Split";

        public static readonly string RecbillAdministratorsRole =
                                                              "RecbillAdministrators";
        public static readonly string RecbillManagersRole = "RecbillManagers";
    }
}


[root@cpzljc Pages]# cat Login.razor 
@page "/Account/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using jtpjsapp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<head>
<style>
.centered-flex {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* 使div的高度等于视口高度 */
}

.content {
  /* 内容样式 */
  text-align: center;
  width: 500px;
  margin: auto;
}

.background-image {
    background-image: url('票据系统背景图.jpg'); /* 修改为你的图片路径 */
    background-size: cover; /* 背景图片覆盖整个元素 */
    background-position: center; /* 背景图片居中 */
    height: 100vh; /* 根据需要设置高度 */
    width: 100%; /* 根据需要设置宽度 */
}
</style>
</head>

<PageTitle>登录</PageTitle>

<div class="centered-flex">
<div class="content">
<h1>登录</h1>
@*<FluentGrid>*@
    @* <FluentGridItem  xs="8" sm="4"> *@
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2>使用注册后的邮箱登录。</h2>
            <hr />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="邮箱" Style="width: 100%" AllowAnonymous="true"/>
                <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="密码" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="记住我" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">登录</FluentButton>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">忘记了你的 密码?</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">注册新用户</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ResendEmailConfirmation">再次发送邮箱确认</FluentAnchor>
                    </p>
            </FluentStack>
        </EditForm>
@* </FluentGridItem> *@
    @*
    <FluentGridItem xs="12" sm="8">
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </FluentGridItem>
    *@
@* </FluentGrid>  *@
</div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            //RedirectManager.RedirectTo(ReturnUrl);
            RedirectManager.RedirectTo("home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "错误：无效的登录尝试。";
        }
    }

    public async Task RegisteAsync()
    {
            Logger.LogInformation("User registe.");
            //RedirectManager.RedirectTo(ReturnUrl);
            RedirectManager.RedirectTo("Account/Register");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

[root@cpzljc Pages]# cat Register.razor 
@page "/Account/Register"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using jtpjsapp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<head>
<style>
.centered-flex {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* 使div的高度等于视口高度 */
}

.content {
  /* 内容样式 */
  text-align: center;
  width: 500px;
  margin: auto;
}

.background-image {
    background-image: url('票据系统背景图.jpg'); /* 修改为你的图片路径 */
    background-size: cover; /* 背景图片覆盖整个元素 */
    background-position: center; /* 背景图片居中 */
    height: 100vh; /* 根据需要设置高度 */
    width: 100%; /* 根据需要设置宽度 */
}
</style>
</head>

<PageTitle>注册</PageTitle>

<div class="centered-flex">
<div class="content">
<h1>注册</h1>
@* <FluentGrid> *@
    @* <FluentGridItem xs="8" sm="4"> *@
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>创建一个新账号。</h2>
            <hr />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="email" Required="true" Placeholder="name@example.com" Label="邮箱" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="new-password" Required="true" Placeholder="password" Label="密码" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentTextField type="password" Name="Input.ConfirmPassword" @bind-Value="Input.ConfirmPassword" AutoComplete="new-password" Required="true" Placeholder="password" Label="确认密码" Style="width: 100%" />      
                <FluentValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">注册</FluentButton>
            </FluentStack>
        </EditForm>
@*    </FluentGridItem>   *@
    @*
    <FluentGridItem xs="12" sm="8">
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </FluentGridItem>
    *@
@* </FluentGrid> *@
</div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl)); 

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +   
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}


[root@cpzljc Manage]# cat Index.razor 
@page "/Account/Manage"
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using jtpjsapp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>简介</PageTitle>

<h3>简介</h3>
<StatusMessage />

<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField Value="@username" Placeholder="Please choose your username." Disabled Label="用户名" Appearance=FluentInputAppearance.Filled Style="width: 100%" />
            <FluentTextField Name="Input.PhoneNumber" @bind-Value="Input.PhoneNumber" Paceholder="Please enter your phone number." Label="手机号码" Style="width: 100%" />
            <FluentValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">保存</FluentButton>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("错误: 修改电话号码失败。", HttpContext);        
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("你的资料已经更新了。", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}


[root@cpzljc Manage]# cat PersonalData.razor 
@page "/Account/Manage/PersonalData"

@inject IdentityUserAccessor UserAccessor

<PageTitle>个人数据</PageTitle>

<StatusMessage />
<h3>个人数据</h3>

<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <p>你的账号包含已给的个人数据，此页允许你下载或删除。</p>
        <p>
            <strong>删除你的账号后，无法恢复。</strong>
        </p>
        <form action="Account/Manage/DownloadPersonalData" method="post">
            <AntiforgeryToken />
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width:20%;">下载</FluentButton>
        </form>

        <hr />

        <p>
            <FluentAnchor Href="Account/Manage/DeletePersonalData" Style="width:20%;">删除</FluentAnchor>        
        </p>
    </FluentGridItem>
</FluentGrid>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _ = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }
}


[root@cpzljc Manage]# cat Email.razor 
@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using jtpjsapp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>管理邮箱</PageTitle>

<h3>管理邮箱</h3>

<StatusMessage Message="@message"/>
<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">        
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            @if (isEmailConfirmed)
            {
                <FluentTextField Value="@email" Placeholder="Please enter your email." Disabled Label="邮箱" Appearance=FluentInputAppearance.Filled Style="width: 100%">
                    <span slot="end">?</span>
                </FluentTextField>
            }
            else
            {
                <FluentTextField value="@email" Placeholder="Please enter your email." Disabled Label="邮箱" Appearance=FluentInputAppearance.Filled Style="width: 100%" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Form="send-verification-form" Style="width: 100%">发送验证邮箱</FluentButton>
            }
            <FluentTextField Name="Input.NewEmail" @bind-Value="Input.NewEmail" AutoComplete="email" Required="true" Placeholder="Please enter new email." Label="新邮箱" Style="width: 100%" />
            <FluentValidationMessage For="() => Input.NewEmail" class="text-danger" />
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">变更邮箱</FluentButton>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));       

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}


[root@cpzljc Manage]# cat ChangePassword.razor 
@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using jtpjsapp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>修改密码</PageTitle>

<h3>修改密码</h3>
<StatusMessage Message="@message" />
<FluentGrid>
    <FluentGridItem xs="12" sm="6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">     
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField type="password" Name="Input.OldPassword" @bind-Value="Input.OldPassword" class="form-control" AutoComplete="current-password" Required="true" Placeholder="Please enter your old password." Label="旧密码" Style="width: 100%" />
            <FluentValidationMessage For="() => Input.OldPassword" class="text-danger" />
            <FluentTextField type="password" Name="Input.NewPassword" @bind-Value="Input.NewPassword" class="form-control" AutoComplete="new-password" Required="true" Placeholder="Please enter your new password." Label="新密码" Style="width: 100%" />
            <FluentValidationMessage For="() => Input.NewPassword" class="text-danger" />
            <FluentTextField type="password" Name="Input.ConfirmPassword" @bind-Value="Input.ConfirmPassword" class="form-control" AutoComplete="new-password" Required="true" Placeholder="Please confirm your new password." Label="确认密码" Style="width: 100%" />
            <FluentValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">修改密码</FluentButton>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("密码更改成功！", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]      
        public string ConfirmPassword { get; set; } = "";
    }
}


[root@cpzljc Shared]# cat ManageLayout.razor 
@inherits LayoutComponentBase
@layout AccountLayout

<h1>账户管理</h1>

<div class="manage">
    <h2>变更账户设置</h2>
    <hr />
    <FluentGrid>
        <FluentGridItem sm="3">
            <ManageNavMenu />
        </FluentGridItem>

        <FluentGridItem sm="9">
            @Body
        </FluentGridItem>
    </FluentGrid>
</div>


[root@cpzljc Shared]# cat ManageNavMenu.razor 
@using Microsoft.AspNetCore.Identity
@using jtpjsapp.Data

@inject SignInManager<ApplicationUser> SignInManager

<FluentNavMenu Collapse="false">
    <FluentNavLink Href="Account/Manage" Match="NavLinkMatch.All">简介</FluentNavLink>
    <FluentNavLink Href="Account/Manage/Email">邮箱</FluentNavLink>
    <FluentNavLink Href="Account/Manage/ChangePassword">密码</FluentNavLink>
    @if (hasExternalLogins)
    {
        <FluentNavLink Href="Account/Manage/ExternalLogins">External logins</FluentNavLink>
    }
    <FluentNavLink Href="Account/Manage/TwoFactorAuthentication">双重身份验证</FluentNavLink>
    <FluentNavLink Href="Account/Manage/PersonalData">个人数据</FluentNavLink>

</FluentNavMenu>


@code {
    private bool hasExternalLogins;

    protected override async Task OnInitializedAsync()
    {
        hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    }
}


[root@cpzljc Pages]# cat ForgotPassword.razor 
@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using jtpjsapp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>忘记了你的密码?</PageTitle>

<h1>忘记了你的密码?</h1>
<h2>输入你的邮箱。</h2>
<hr />
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">        
            <DataAnnotationsValidator />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="邮箱" Style="width: 100%;" />
            <FluentValidationMessage For="() => Input.Email" class="text-danger" />
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">重置密码</FluentButton>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));   

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}


[root@cpzljc jtpjsapp]# dotnet publish -c Release
jtpjsapp -> /opt/aspnetcore/jtpjsapp/bin/Release/net8.0/jtpjsapp.dll
jtpjsapp -> /opt/aspnetcore/jtpjsapp/bin/Release/net8.0/publish/

[root@cpzljc publish]# ./jtpjsapp --urls  http://1.26:5246
[root@cpzljc jtpjsapp]# cat appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "DataSource=Data\\app.db;Cache=Shared"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Kestrel": {
    "Endpoints": {
      "MyHttpEndpoint": {
        "Url": "http://1.26:5246"
      }
    }
  }

}



[root@cpzljc Properties]# cat launchSettings.json 
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
    "iisSettings": {
      "windowsAuthentication": false,
      "anonymousAuthentication": true,
      "iisExpress": {
        "applicationUrl": "http://localhost:51578",
        "sslPort": 44319
      }
    },
    "profiles": {
      "http": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "applicationUrl": "http://1.26:5200",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      },
      "https": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "applicationUrl": "https://localhost:7190;http://localhost:5017",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      },
      "IIS Express": {
        "commandName": "IISExpress",
        "launchBrowser": true,
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      }
    }
  }

  



安装 Nginx
RHEL and derivatives
This section applies to Red Hat Enterprise Linux and its derivatives such as CentOS, Oracle Linux, Rocky Linux, AlmaLinux.
[root@cpzljc jtpjsapp]# sudo yum install yum-utils
警告：加载 '/etc/yum.repos.d/CentOS-Base.repo' 失败，跳过。
上次元数据过期检查：1:49:44 前，执行于 2024年10月31日 星期四 14时34分41秒。
软件包 yum-utils-4.0.21-3.el8.noarch 已安装。
依赖关系解决。
无需任何处理。
完毕！

To set up the yum repository, create the file named /etc/yum.repos.d/nginx.repo with the following contents:
[nginx-stable]
name=nginx stable repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=1
enabled=1
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true

[nginx-mainline]
name=nginx mainline repo
baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
gpgcheck=1
enabled=0
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true

[root@cpzljc jtpjsapp]# sudo yum install nginx
When prompted to accept the GPG key, verify that the fingerprint matches 573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62, and if so, accept it.


--查看centos8 CPU、内存使用情况
[root@cpzljc aspnetcore]# top
Tasks: 438 total,   1 running, 437 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :  31956.8 total,  29309.2 free,   1450.6 used,   1197.1 buff/cache
MiB Swap:   4056.0 total,   4056.0 free,      0.0 used.  30057.9 avail Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                    
   3059 root      20   0 8908800 318632 134548 S   1.7   1.0   0:13.17 gnome-shell
   2452 mysql     20   0 2459452 434896  37252 S   0.3   1.3   0:01.91 mysqld
   3988 root      20   0   65916   5400   4248 R   0.3   0.0   0:00.16 top                                                        
      1 root      20   0  238452  10928   8024 S   0.0   0.0   0:01.58 systemd
      2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd
      3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp
      4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp
      6 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 kworker/0:0H-events_highpri
	  	  

[root@cpzljc jtpjsapp]# dotnet add package ClosedXML
[root@cpzljc jtpjsapp]# cat jtpjsapp.csproj 
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>aspnet-jtpjsapp-e8877394-d670-415f-b132-afb8176841ec</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Data\app.db" CopyToOutputDirectory="PreserveNewest" ExcludeFromSingleFile="true" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ClosedXML" Version="0.104.1" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="8.0.7" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.7" />

    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.7" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.7" />
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter" Version="4.10.2" />
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components.Emoji" Version="4.6.0" />
    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="8.0.2" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components" Version="4.*-*" />
    <PackageReference Include="Microsoft.FluentUI.AspNetCore.Components.Icons" Version="4.10.2" />
  </ItemGroup>
</Project>


mysql 备份：
[root@cpzljc backup]# mkdir jtpjsapp_backup

[root@cpzljc jtpjsapp_backup]# vim jtpjsapp_backup.sh
#!/bin/bash  
# 设置备份存储路径
backup_dir="/opt/backup/jtpjsapp_backup"
# 设置备份文件名
backup_file="$backup_dir/jtpjsapp$(date +%Y%m%d%H%M%S).sql"
# 设置MySQL登录凭据
mysql_user="root"
mysql_password="jtT0795,.,"
# 备份MySQL数据库到指定文件
##mysqldump -u$mysql_user -p$mysql_password --all-databases > $backup_file
mysqldump  -u$mysql_user -p$mysql_password --databases jt_pjs > $backup_file
# 打印备份完成信息
echo "MySQL jtpjsapp backup successfully completed: $backup_file"

[root@cpzljc jtpjsapp_backup]# chmod +x jtpjsapp_backup.sh

[root@cpzljc jtpjsapp_backup]# vim cleanup_jtpjsapp_backup.sh
#!/bin/bash  
# 设置备份存储路径
backup_dir="/opt/backup/jtpjsapp_backup"
# 设置最大备份文件数量
max_files=7
# 清理旧的备份文件
ls -t $backup_dir/*.sql | tail -n +$max_files | xargs -d '\n' rm -f
# 打印清理完成信息
echo "Old jtpjsapp backup files cleaned up successfully"

[root@cpzljc jtpjsapp_backup]# chmod +x cleanup_jtpjsapp_backup.sh

[root@cpzljc jtpjsapp_backup]# crontab -e
# 每天凌晨3点执行备份脚本
0 3 * * * /opt/backup/mysql_backup.sh
0 3 * * * /opt/backup/jtpjsapp_backup/jtpjsapp_backup.sh
# 每天凌晨5点执行备份脚本
0 5 * * * /opt/backup/cleanup_backup.sh
0 5 * * * /opt/backup/jtpjsapp_backup/cleanup_jtpjsapp_backup.sh

cron日志在/var/log/cron

还原：
mysql -u root -p -e "CREATE DATABASE if not exists jt_pjs;"
mysql -u root -p jt_pjs < /tmp/backup/jtpjsapp20241112081110.sql


[root@cpzljc jtpjsapp_backup]# cp -rf /opt/aspnetcore/jtpjsapp/  jtpjsapp

[root@cpzljc Pages]# dotnet --version
8.0.301

[root@cpzljc jtpjsapp]# dotnet list package
Project 'jtpjsapp' has the following package references
   [net8.0]: 
   Top-level Package                                                               Requested   Resolved
   > ClosedXML                                                                     0.104.1     0.104.1
   > Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore                          8.0.7       8.0.7
   > Microsoft.AspNetCore.Identity.EntityFrameworkCore                             8.0.7       8.0.7
   > Microsoft.EntityFrameworkCore.Design                                          8.0.10      8.0.10
   > Microsoft.EntityFrameworkCore.Sqlite                                          8.0.7       8.0.7
   > Microsoft.EntityFrameworkCore.Tools                                           8.0.7       8.0.7
   > Microsoft.FluentUI.AspNetCore.Components                                      4.*-*       4.10.3
   > Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter      4.10.2      4.10.2
   > Microsoft.FluentUI.AspNetCore.Components.Emoji                                4.6.0       4.6.0
   > Microsoft.FluentUI.AspNetCore.Components.Icons                                4.10.2      4.10.2
   > Pomelo.EntityFrameworkCore.MySql                                              8.0.2       8.0.2


dotnet new blazor -au Individual -o BlazorApp2 

1589918482@qq.com/Yuan1877008@

微软Open XML SDK: 导出excel库，https://learn.microsoft.com/zh-cn/office/open-xml/open-xml-sdk   
ClosedXML ：导出excel库，基于OpenXML  https://github.com/ClosedXML/ClosedXML     https://docs.closedxml.io/en/latest/     

https://learn.microsoft.com/zh-cn/


	
8、 scp 将文件夹从windows传输给linux
SCP (Secure Copy) 是一个基于SSH（Secure Shell）的命令行工具，可以用来在Linux和Windows之间安全地传输文件。要使用SCP将文件夹从Windows传输到Linux，您需要在Windows机器上使用SCP客户端，并且确保您的Linux机器上已安装了SSH服务器。

以下是使用SCP将文件夹从Windows传输到Linux的步骤：
在Windows机器上，确保已安装SCP客户端，如Windows 10和更高版本通常已预装OpenSSH客户端。如果没有，可以从Microsoft Store安装OpenSSH客户端。
打开命令提示符或PowerShell。
使用以下SCP命令格式将文件夹及其内容传输到Linux服务器：
scp -r C:\path\to\local\folder username@linux_host:/path/to/remote/directory
其中：
-r 表示递归，用于传输文件夹。
C:\path\to\local\folder 是您要传输的Windows本地文件夹路径。
username 是您的Linux服务器上的用户名。
linux_host 是您的Linux服务器的IP地址或主机名。
/path/to/remote/directory 是Linux服务器上的目标文件夹路径。
确保您有适当的权限访问目标文件夹，并且Linux服务器上的SSH服务正在运行。
示例代码：
scp -r C:\Users\exampleuser\Documents\ myuser@192.168.1.10:/home/myuser/
scp -P 1225 -r G:\yuanxiaowen\G公司制度\技术管理部\jtpjsapp\ root@1.26:/opt/aspnetcore/
这个命令会将Windows上的C:\Users\exampleuser\Documents\文件夹递归地传输到IP地址为192.168.1.10的Linux服务器上的/home/myuser/目录。	

	--从linux环境复制文件到windows环境
    scp -P 1225 -r root@1.26:/opt/aspnetcore/jtpjsapp/  /D:

    scp -P 1225 -r root@1.26:/opt/aspnetcore/ccjyapp/  /D:	
	
	scp -P 1225 -r root@1.26:/opt/rust/xtkq/  /D:
	
	scp -P 1225 -r root@1.26:/opt/aspnetcore/jtpjsapp/files/export/应收票据母票列表.xlsx  /D:
	
	scp -P 1225 -r root@1.26:/opt/backup/jtpjsapp_backup/jtpjsapp20241114030001.sql  /D:
	
	--从windows上传文件到linux
	scp -P 1225 G:/yuanxiaowen/G公司制度/技术管理部/02项目/应收票据/票据系统背景图.jpg root@1.26:/opt/aspnetcore/jtpjsapp/wwwroot
	scp -P 1225 D:/jtpjsapp20241112081110.sql root@1.25:/tmp/backup
	
9、 如何上传一个文件夹到github
要将一个文件夹上传到GitHub，需要进行以下步骤：
第一步：创建一个新的GitHub仓库
1. 在GitHub上创建一个新的仓库，命名为你想要上传的文件夹的名称。
2. 在仓库创建页面上，可以选择是否添加README文件、.gitignore文件等。

第二步：打开终端或命令行工具
1. 打开终端或命令行工具，并进入你要上传的文件夹的路径。

第三步：初始化本地仓库
1. 在终端或命令行工具中输入以下命令来初始化本地仓库：
   git init

第四步：添加文件夹中的所有文件到本地仓库
1. 在终端或命令行工具中输入以下命令来将文件夹中的所有文件添加到本地仓库：
   git add .

第五步：提交文件到本地仓库
1. 在终端或命令行工具中输入以下命令来提交文件到本地仓库，并添加提交信息：
   git commit -m “Initial commit”

   git config --global user.email "1589918482@qq.com"
   git config --global user.name "yanshu"
   
第六步：将本地仓库连接到GitHub仓库
1. 在GitHub仓库页面中，复制远程仓库的URL。
2. 在终端或命令行工具中输入以下命令来将本地仓库与远程仓库连接：   
   git remote add origin https://github.com/zuijiaoghb/jtpjsapp.git
   git remote add origin https://github.com/zuijiaoghb/ccjyapp.git
   git remote add origin https://github.com/zuijiaoghb/xtkq.git

第七步：将本地仓库的提交推送到GitHub仓库
1. 在终端或命令行工具中输入以下命令来将本地仓库的提交推送到GitHub仓库：
   git push -u origin master

完成以上步骤后，文件夹中的所有文件将被上传到GitHub仓库中。你可以在GitHub上查看和管理这些文件。	

10、 删除文件夹及其下的文件夹及文件
[root@cpzljc aspnetcore]# rm -rf BlazorApp

11、 mudblazor app
[root@cpzljc aspnetcore]# dotnet new install MudBlazor.Templates
[root@cpzljc aspnetcore]# dotnet new mudblazor -o ccjyapp --interactivity Server --auth Individual --all-interactive

[root@cpzljc Properties]# cat launchSettings.json 
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
    "iisSettings": {
      "windowsAuthentication": false,
      "anonymousAuthentication": true,
      "iisExpress": {
        "applicationUrl": "http://localhost:63410",
        "sslPort": 44371
      }
    },
    "profiles": {
      "http": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "applicationUrl": "http://1.26:5026",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      },
      "https": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "applicationUrl": "https://localhost:7246;http://localhost:5026",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      },
      "IIS Express": {
        "commandName": "IISExpress",
        "launchBrowser": true,
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      }
    }
  }

  
[root@cpzljc Layout]# cat MainLayout.razor 
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">出厂检验</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">??</a>
</div>

@code {
    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}  


[root@cpzljc Layout]# cat NavMenu.razor 
@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
   @* <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>   
    <MudNavLink Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Weather</MudNavLink>  
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink> *@
    <MudNavLink Href="motorParameter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.SportsMotorsports">电机参数</MudNavLink>
   @*
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout 
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
   *@
</MudNavMenu>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


[root@cpzljc Pages]# cp Counter.razor MotorParameter.razor
[root@cpzljc Pages]# vim MotorParameter.razor
[root@cpzljc Pages]# cat MotorParameter.razor 
@page "/motorParameter"

@implements IDisposable
@inject ILogger<MotorParameterModel> Logger
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject IAuthorizationService AuthorizationService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@using System.ComponentModel.DataAnnotations
@using ccjyapp.Data

<PageTitle>电机参数</PageTitle>

<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
    <MudButton StartIcon="@Icons.Material.Filled.AddCircleOutline" IconColor="Color.Primary" @onclick="addMotorParameterAsync" Disabled=adddisabled >新增</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary"  Disabled=modifydisabled @onclick="modifyMotorParameterBySerialNumberAndId">修改</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Primary"  Disabled=deletedisabled @onclick="deleteMotorParameterBySerialNumberAndId">删除</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.FindInPage" IconColor="Color.Primary" Disabled=finddisabled @onclick="OpenFindMotorParamterBySerialNumberDialog" >查询</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Print" IconColor="Color.Primary" @onclick="OpenPrintMotorParameterQRCoderDialog">打印二维码</MudButton>
</MudButtonGroup>

@*
<div @ref="printMotorParameterQRCoderElement">
    <!-- 需要打印的内容 -->
    "要打印的内容"
</div>

<button @onclick="() => PrintContent(printMotorParameterQRCoderElement)">打印</button>
*@

<MudDialog @bind-Visible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.FindInPage" Class="mr-3" /> 查询方案
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" lg="3">
                <MudTextField Label="序列号" HelperText="" Class="mt-3" Required="true"  Variant="Variant.Outlined"
                              @bind-Value="serialNumber" For="@(() => serialNumber)" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">取消</MudButton>
        <MudButton Color="Color.Primary" OnClick="FindMotorParameterBySerialNumberAsync">确认</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="_printMotorParameterQRCodervisible" Options="_printMotorParameterQRCoderdialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.QrCode" Class="mr-3" /> 电机参数二维码
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" lg="3">
                <div @ref="printMotorParameterQRCoderElement">
                    <MudImage Src="@qrCodeImageAsBase64_src" Alt="" Elevation="25" Class="rounded-lg" Width="200" Height="200"/>
                    @* <img src= "@qrCodeImageAsBase64_src" width="300" height="300"> *@
                </div>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="printMotorParameterQRCoderCancel">取消</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => printMotorParameterQRCoderAsync(printMotorParameterQRCoderElement)">确认打印</MudButton>
    </DialogActions>
</MudDialog>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" lg="3" >
        <MudText Typo="Typo.h5" Align="Align.Center" >电机参数</MudText>
    </MudItem>
</MudGrid>

<EditForm Model="motorParameterModel" OnValidSubmit="OnValidSubmitAsync">
<DataAnnotationsValidator/>
<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Disabled=submitdisabled>保存</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Primary" Disabled=cansledisabled @onclick="cansleSubmit">取消</MudButton>
</MudButtonGroup>
<MudGrid>
    <MudItem xs="12" lg="3">
        <MudSelect @bind-Value="motorParameterModel.Company" Label="所属单位" Variant="Variant.Outlined"  Required="true"  HelperText="选择所属单位" OpenIcon="@Icons.Material.Filled.House" AdornmentColor="Color.Secondary" ReadOnly=formdisabled >
                     @foreach (MotorParameterCompany item in Enum.GetValues(typeof(MotorParameterCompany))) {
                     <MudSelectItem Value="@item">@item</MudSelectItem>
                }
         </MudSelect>
    </MudItem>
    <MudItem xs="12" lg="3">
        <MudTextField ShrinkLabel Label="中联编码" Class="mt-3" Variant="Variant.Outlined"  Required="true"
                              @bind-Value="motorParameterModel.ZLCode" For="@(() => motorParameterModel.ZLCode)" ReadOnly=formdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
        <MudTextField ShrinkLabel Label="序列号" HelperText="电机序列号" Class="mt-3" Required="true"  Variant="Variant.Outlined"
                              @bind-Value="motorParameterModel.SerialNumber" For="@(() => motorParameterModel.SerialNumber)" ReadOnly=formdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RatedPower" Label="额定功率" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RatedFrequency" Label="额定频率" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                      

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RatedSpeed" Label="额定转速" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                          

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RatedVoltage" Label="额定电压" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                        

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RatedCurrent" Label="额定电流" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                        

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.StatorResistance" Label="定子电阻" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                    

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.RotorResistance" Label="转子电阻" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                     

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.LeakageReactance" Label="漏感抗" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                      

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.MutualInductance" Label="互感抗" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />                      

    </MudItem>
        <MudItem xs="12" lg="3">
        <MudNumericField @bind-Value="motorParameterModel.NoLoadCurrent" Label="空载电流" Variant="Variant.Outlined" Min="0.0" Required="true" ReadOnly=formdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
       <MudDatePicker ShrinkLabel Label="新建日期" Editable="true" @bind-Date="addtimedate" Placeholder="" Variant="Variant.Outlined" ReadOnly=foreverdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
       <MudTimePicker ShrinkLabel Label="新建时间" AmPm="true" @bind-Time="addtimespan" Variant="Variant.Outlined" ReadOnly=foreverdisabled  />
    </MudItem>
    <MudItem xs="12" lg="3">
       <MudDatePicker ShrinkLabel Label="修改日期" Editable="true" @bind-Date="modifytimedate" Placeholder="" Variant="Variant.Outlined" ReadOnly=foreverdisabled />
    </MudItem>
    <MudItem xs="12" lg="3">
       <MudTimePicker ShrinkLabel Label="修改时间" AmPm="true" @bind-Time="modifytimespan" Variant="Variant.Outlined" ReadOnly=foreverdisabled />
    </MudItem>
</MudGrid>
</EditForm>

@code {
    private MotorParameterModel motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
    private DateTime? addtimedate = DateTime.Today;
    private DateTime? modifytimedate;
    //private TimeSpan? addtimespan = new TimeSpan(motorParameterModel.AddTime.Hour, motorParameterModel.AddTime.Minute, motorParameterModel.AddTime.Second);
    //private TimeSpan? modifytimespan = new TimeSpan(motorParameterModel.ModifyTime.Hour, motorParameterModel.ModifyTime.Minute, motorParameterModel.ModifyTime.Second);
    private TimeSpan? addtimespan = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
    private TimeSpan? modifytimespan;

    private ApplicationDbContext? Context { get; set; }
    private bool Busy;

    private int currentCount = 0;
    private bool adddisabled = false;
    private bool finddisabled = false;
    private bool modifydisabled = true;
    private bool deletedisabled = true;
    private bool submitdisabled = true;
    private bool cansledisabled = true;
    private bool formdisabled = true;
    private bool ismodifybutton = false;
    private bool foreverdisabled = true;

    private string motorParameterCompany;
    string state = "Message box hasn't been opened yet";

    private bool _visible;
    private readonly DialogOptions _dialogOptions = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
    private string serialNumber;

    private string qrCodeImageAsBase64_src;
    private bool _printMotorParameterQRCodervisible;
    private readonly DialogOptions _printMotorParameterQRCoderdialogOptions = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = false, BackdropClick = false };

    private ElementReference printMotorParameterQRCoderElement;

    private void OpenFindMotorParamterBySerialNumberDialog()
    {
        _visible = true;
    }

   private void OpenPrintMotorParameterQRCoderDialog(){
        string qrCodeContent = "0001" +  FloatToHexConverter.FloatToHexString((float)motorParameterModel.RatedPower) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.RatedFrequency) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.RatedSpeed) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.RatedVoltage) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.RatedCurrent) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.StatorResistance) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.RotorResistance) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.LeakageReactance) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.MutualInductance) + FloatToHexConverter.FloatToHexString((float)motorParameterModel.NoLoadCurrent);
        Logger.LogInformation("qrCodeContent = {qrCodeContent}", qrCodeContent);
        string qrCodeContentBASE64 = motorParameterModel.ZLCode + "&" +motorParameterModel.SerialNumber + "&" +  Base64EncodingUtil.EncodeHexStringToBase64(qrCodeContent).Replace("+", "-").Replace("/", "_");
        Logger.LogInformation("qrCodeContentBASE64 = {qrCodeContentBASE64}", qrCodeContentBASE64);

        //Console.Write(b.ToString("X2") + " ");
        //Console.WriteLine("四字节十六进制表示:" + qrCodeContent);

        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(qrCodeContentBASE64, QRCodeGenerator.ECCLevel.M);

        var imgType = Base64QRCode.ImageType.Png;
        Base64QRCode qrCode = new Base64QRCode(qrCodeData);
        string qrCodeImageAsBase64 = qrCode.GetGraphic(20, "#000000", "#ffffff", true, imgType);
        //Logger.LogInformation("qrCodeImageAsBase64 = {qrCodeImageAsBase64}", qrCodeImageAsBase64);
        qrCodeImageAsBase64_src = "data:image/" + imgType.ToString().ToLower() + ";base64," + qrCodeImageAsBase64;
        //Logger.LogInformation("qrCodeImageAsBase64_src = {qrCodeImageAsBase64_src}" , qrCodeImageAsBase64_src);

        _printMotorParameterQRCodervisible = true;
   }

    private async Task FindMotorParameterBySerialNumberAsync() {
        if (Busy) {
            return;
        }

        Busy = true;
        modifydisabled = true;
        deletedisabled = true;

           if (serialNumber is null) {
                                bool? result = await DialogService.ShowMessageBox(
                   "警告",
                   "查询前请输入序列号。",
                   yesText:"确认", cancelText:"取消");
                state = result == null ? "取消" : "确认";
                StateHasChanged();

                modifydisabled = true;
                deletedisabled = true;
            } else {
              try {
              MotorParameterModel motorp =  Context.MotorParameters.Single(b => b.SerialNumber == serialNumber);
              motorParameterModel.Id=motorp.Id;
              motorParameterModel.Company=motorp.Company;
              motorParameterModel.ZLCode=motorp.ZLCode;
              motorParameterModel.SerialNumber=motorp.SerialNumber;
              motorParameterModel.RatedPower=motorp.RatedPower;
              motorParameterModel.RatedFrequency=motorp.RatedFrequency;
              motorParameterModel.RatedSpeed=motorp.RatedSpeed;
              motorParameterModel.RatedVoltage=motorp.RatedVoltage;
              motorParameterModel.RatedCurrent=motorp.RatedCurrent;
              motorParameterModel.StatorResistance=motorp.StatorResistance;
              motorParameterModel.RotorResistance=motorp.RotorResistance;
              motorParameterModel.LeakageReactance=motorp.LeakageReactance;
              motorParameterModel.MutualInductance=motorp.MutualInductance;
              motorParameterModel.NoLoadCurrent=motorp.NoLoadCurrent;
              motorParameterModel.Selected=motorp.Selected;
              motorParameterModel.OwnerID=motorp.OwnerID;
              motorParameterModel.Status=motorp.Status;
              motorParameterModel.AddTime=motorp.AddTime;
              motorParameterModel.ModifyTime=motorp.ModifyTime;
              addtimedate = motorp.AddTime.Date;
              addtimespan = new TimeSpan(motorp.AddTime.Hour, motorp.AddTime.Minute, motorp.AddTime.Second);
              modifytimedate = motorp.ModifyTime?.Date;
              modifytimespan = new TimeSpan(motorp.ModifyTime?.Hour?? default(int), motorp.ModifyTime?.Minute?? default(int), motorp.ModifyTime?.Second?? default(int) );

              //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
              //var user = authState.User;
              //var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        //user, recbill,
                                                        //RecbillOperations.Read);
              //if (!isAuthorized.Succeeded)
              //{
                //recbill = new RecBillModel( DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now );
                //var dialog = await DialogService.ShowErrorAsync("当前用户没有查询该数据的权限。" );
                //var result = await dialog.Result;
                //recbill = new RecBillModel(DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now, DateTime.Now);
              //} else {
                  modifydisabled = false;
                  deletedisabled = false;
              //}
            } catch (System.InvalidOperationException e ) {
                bool? result = await DialogService.ShowMessageBox(
                   "错误",
                   "该电机参数不存在。",
                   yesText:"确认", cancelText:"取消");
                state = result == null ? "取消" : "确认";
                StateHasChanged();

              motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
              modifydisabled = true;
              deletedisabled = true;
              Busy = false;
             }
          }

                formdisabled = true;
                submitdisabled = true;
                cansledisabled = true;

                Busy = false;

        _visible = false;
    }

    private void Cancel() {
         _visible = false;
    }

    private void printMotorParameterQRCoderCancel() {
         _printMotorParameterQRCodervisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
           Busy = true;

           Context = DbFactory.CreateDbContext();

           Busy = false;

           await base.OnInitializedAsync();
           // ... 其他初始化代码
           motorParameterCompany = "1";
           motorParameterModel.Company = MotorParameterCompany.江西江特;

     }

     private  async Task  addMotorParameterAsync(){
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User;

        //recbill.OwnerID = UserManager.GetUserId(user);
        //var isAuthorized = await AuthorizationService.AuthorizeAsync(
        //                                                                                              user, recbill,
        //                                                                                              RecbillOperations.Create);
        //if (!isAuthorized.Succeeded)
        //{
           //var dialog = await DialogService.ShowErrorAsync("当前用户没有新建权限。" );
           //var result = await dialog.Result;
        //} else {
        formdisabled = false;
        submitdisabled = false;
        cansledisabled = false;
        ismodifybutton = false;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = true;
        motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
        motorParameterCompany = "1";
        motorParameterModel.Company = MotorParameterCompany.江西江特;
     //}
    }

    private  void cansleSubmit(){
        if (ismodifybutton == false ) {
        formdisabled = true;
        submitdisabled = true;
        cansledisabled = true;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = false;
        motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
        }

        if (ismodifybutton == true ) {
        formdisabled = true;
        submitdisabled = true;
        cansledisabled = true;
        modifydisabled = false;
        deletedisabled = false;
        finddisabled = false;
        }
    }

    private async Task  modifyMotorParameterBySerialNumberAndId(){
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User;

        //var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        //user, recbill,
                                                        //RecbillOperations.Update);
        //if (!isAuthorized.Succeeded)
        //{
           //var dialog = await DialogService.ShowErrorAsync("当前用户没有修改权限。" );
           //var result = await dialog.Result;
        //} else {
        formdisabled = false;
        submitdisabled = false;
        cansledisabled =false;
        ismodifybutton = true;
        modifydisabled = true;
        deletedisabled = true;
        finddisabled = true;
        Busy = false;
      //}
    }

   private async Task  deleteMotorParameterBySerialNumberAndId() {
       //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
       //var user = authState.User;

       //var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        //user, recbill,
                                                        //RecbillOperations.Delete);
       //if (!isAuthorized.Succeeded)
       //{
               //var dialog = await DialogService.ShowErrorAsync("当前用户没有删除该数据权限。" );
               //var result = await dialog.Result;
       //} else {

       if (Busy) {
            return;
       }

        Busy = true;

                bool? result = await DialogService.ShowMessageBox(
                   "警告",
                   "确认删除吗?",
                   yesText:"确认", cancelText:"取消");
           state = result == null ? "取消" : "确认";
           StateHasChanged();

        if (result == true) {
            int count = 0 ;

            try {
                 var motorp = Context.MotorParameters.Single(b => b.SerialNumber == motorParameterModel.SerialNumber && b.Id==motorParameterModel.Id);
                 Context.MotorParameters.Remove(motorp);
                 count = Context.SaveChanges();
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                bool? result2 = await DialogService.ShowMessageBox(
                        "错误",
                        "删除失败!该票据不存在。",
                        yesText:"确认", cancelText:"取消");
                    state = result == null ? "取消" : "确认";
                    StateHasChanged();

                Busy = false;
             }
             if (count>0) {
                bool? result2 = await DialogService.ShowMessageBox(
                        "成功",
                        "删除成功！",
                        yesText:"确认", cancelText:"取消");
                    state = result == null ? "取消" : "确认";
                    StateHasChanged();

               submitdisabled = true;
               cansledisabled = true;
               modifydisabled = true;
               deletedisabled = true;
                           motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);

               Busy = false;
             }
        }

        if (result == false) {
              submitdisabled = true;
              cansledisabled = true;
        }

        Busy = false;
     //}
   }

    private async Task OnValidSubmitAsync(EditContext context)
    {
        Logger.LogInformation("中联编码 = {ZLCode}", motorParameterModel?.ZLCode);

        if (ismodifybutton == false) {
            if (Busy) {
                return;
            }
            Busy = true;

            //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            //var user = authState.User;

            //recbill.OwnerID = UserManager.GetUserId(user);

            //var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        //user, recbill,
                                                        //RecbillOperations.Create);
            //if (!isAuthorized.Succeeded)
            //{
              //var dialog = await DialogService.ShowErrorAsync("当前用户没有新建权限。" );
              //var result = await dialog.Result;
            //} else {

           int count = 0 ;

           try {
                 motorParameterModel.Status = MotorParameterStatus.Submitted;
                 Context.MotorParameters.Add(motorParameterModel);
                 count = Context.SaveChanges();
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                bool? result = await DialogService.ShowMessageBox(
                   "错误",
                   "保存失败!该电机参数已存在。",
                   yesText:"确认", cancelText:"取消");
               state = result == null ? "Canceled" : "确认";
               StateHasChanged();

                finddisabled = false;
                modifydisabled = true;
                deletedisabled = true;
                submitdisabled = true;
                cansledisabled = true;
                formdisabled = true;
                Busy = false;
             }
             if (count>0) {
                bool? result = await DialogService.ShowMessageBox(
                   "成功",
                   "保存成功！",
                   yesText:"确认", cancelText:"取消");
               state = result == null ? "Canceled" : "确认";
               StateHasChanged();

                finddisabled = false;
                modifydisabled = true;
                deletedisabled = true;
                submitdisabled = true;
                cansledisabled = true;
                formdisabled = true;
                motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
                Busy = false;
             }
             //}

             Busy = false;
        }

       if (ismodifybutton == true) {
            if (Busy) {
                  return;
            }

           Busy = true;
           int count = 0 ;

           try {
                  //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                  //var user = authState.User;

                  //var isAuthorized = await AuthorizationService.AuthorizeAsync(
                                                        //user, recbill,
                                                        //RecbillOperations.Update);
                  //if (!isAuthorized.Succeeded)
                  //{
                   //var dialog = await DialogService.ShowErrorAsync("当前用户没有修改权限。" );
                   //var result = await dialog.Result;
                  //} else {
                var motorp = Context.MotorParameters.Single(b => b.SerialNumber == motorParameterModel.SerialNumber && b.Id==motorParameterModel.Id);
                motorp.Company = motorParameterModel.Company;
                motorp.ZLCode = motorParameterModel.ZLCode;
                motorp.SerialNumber = motorParameterModel.SerialNumber;
                motorp.RatedPower = motorParameterModel.RatedPower;
                motorp.RatedFrequency = motorParameterModel.RatedFrequency;
                motorp.RatedSpeed = motorParameterModel.RatedSpeed;
                motorp.RatedVoltage = motorParameterModel.RatedVoltage;
                motorp.RatedCurrent = motorParameterModel.RatedCurrent;
                motorp.StatorResistance = motorParameterModel.StatorResistance;
                motorp.RotorResistance = motorParameterModel.RotorResistance;
                motorp.LeakageReactance = motorParameterModel.LeakageReactance;
                motorp.MutualInductance = motorParameterModel.MutualInductance;
                motorp.NoLoadCurrent = motorParameterModel.NoLoadCurrent;
                motorp.ModifyTime = DateTime.Now;
                                modifytimedate = DateTime.Now;
                                modifytimespan = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
                count = Context.SaveChanges();
               //}
            } catch (Microsoft.EntityFrameworkCore.DbUpdateException e ) {
                 bool? result = await DialogService.ShowMessageBox(
                   "错误",
                   "保存失败。",
                   yesText:"确认", cancelText:"取消");
                state = result == null ? "Canceled" : "确认";
                StateHasChanged();

                Busy = false;
             }
             if (count>0) {
                bool? result = await DialogService.ShowMessageBox(
                   "成功",
                   "保存成功！",
                   yesText:"确认", cancelText:"取消");
               state = result == null ? "Canceled" : "确认";
               StateHasChanged();

                submitdisabled = true;
                cansledisabled = true;
                modifydisabled = true;
                deletedisabled = true;
                finddisabled = false;
                motorParameterModel = new MotorParameterModel(DateTime.Now, DateTime.Now);
                Busy = false;
             }

          Busy = false;
        }
         Busy = false;
     }


   private async Task printMotorParameterQRCoderAsync(ElementReference elementReference) {
        //var jsObjectRef = DotNetObjectReference.Create(this);
        //await JSRuntime.InvokeVoidAsync("printContent", elementReference, jsObjectRef);
   }


    public void Dispose()
    {
       Context?.Dispose();
    }

}


[root@cpzljc Data]# cat MotorParameterModel.cs 
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace ccjyapp.Data ;

[Index(nameof(SerialNumber), IsUnique = true)]
public class MotorParameterModel
{

  public MotorParameterModel() {}

  public MotorParameterModel(DateTime addtime , DateTime modifytime) {
        this.AddTime = addtime;
        this.ModifyTime = modifytime;
   }

   public int Id { get; set; }

   [Required]
   public MotorParameterCompany Company { get; set; }

   [Required]
   [Comment("中联编码")]
   [StringLength(10,
        ErrorMessage = "中联编码长度最长为10位")]
   public string ZLCode { get; set; }

    [Required]
    [StringLength(11,
        ErrorMessage = "序列号长度最长为11位")]
    public string SerialNumber { get; set; }

    [Required]
    public double RatedPower { get; set; }

    [Required]
    public double RatedFrequency { get; set; }

    [Required]
    public double RatedSpeed { get; set; }

    [Required]
    public double RatedVoltage { get; set; }

    [Required]
    public double RatedCurrent { get; set; }

    [Required]
    public double StatorResistance { get; set; }

    [Required]
    public double RotorResistance { get; set; }

    [Required]
    public double LeakageReactance { get; set; }

    [Required]
    public double MutualInductance { get; set; }

    [Required]
    public double NoLoadCurrent { get; set; }

    public bool Selected { get; set; }

    // user ID from AspNetUser table.
    public string? OwnerID { get; set; }

    [Required]
    public MotorParameterStatus Status { get; set; }

    [Required]
    public DateTime AddTime { get; set; }

    public DateTime? ModifyTime { get; set; }


    /*
    [Range(1, 100000,
        ErrorMessage = "Accommodation invalid (1-100000).")]
    public int MaximumAccommodation { get; set; }

    [Required]
    [Range(typeof(bool), "true", "true",
        ErrorMessage = "This form disallows unapproved ships.")]
    public bool IsValidatedDesign { get; set; }

    [Required]
    public DateTime ProductionDate { get; set; }
    */
}

public enum MotorParameterStatus
{
    Submitted,
    Approved,
    Rejected
}

public enum MotorParameterCompany
{
   江特电机,
   江西江特,
   银锂新能源,
   杭州米格,
   天津华兴,
   宜丰锂业,
   泰昌矿业,
   江特电动车,
   江特客车厂,
   尉尔江西电机有限公司,
   江特高新装备公司,
   江特高新武汉分公司
}


[root@cpzljc Data]# cat ApplicationDbContext.cs 
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace ccjyapp.Data;

public class ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : IdentityDbContext<ApplicationUser>(options)
{
        public DbSet<MotorParameterModel> MotorParameters { get; set; }
}


[root@cpzljc ccjyapp]# dotnet add package Pomelo.EntityFrameworkCore.MySql

[root@cpzljc ccjyapp]# dotnet tool install --global dotnet-ef
工具“dotnet-ef”已成功从版本“8.0.10”更新到版本“9.0.0”。
[root@cpzljc ccjyapp]# dotnet tool uninstall --global dotnet-ef
已成功卸载工具“dotnet-ef”(版本“9.0.0”).
[root@cpzljc ccjyapp]# dotnet tool install --global dotnet-ef --version 8.0.10
可使用以下命令调用工具: dotnet-ef
已成功安装工具“dotnet-ef”(版本“8.0.10”)。
[root@cpzljc ccjyapp]# dotnet add package Microsoft.EntityFrameworkCore.Design

[root@cpzljc ccjyapp]# cat ccjyapp.csproj 
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>aspnet-ccjyapp-ad2ea8aa-47a7-418a-9d6d-b4dc1c7934e4</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <None Update="Data\app.db" CopyToOutputDirectory="PreserveNewest" ExcludeFromSingleFile="true" />
  </ItemGroup>


  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="8.*" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.*" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.*">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.*" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.*" />
    <PackageReference Include="MudBlazor" Version="7.*" />
    <PackageReference Include="Extensions.MudBlazor.StaticInput" Version="2.*" />
    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="8.0.2" />
  </ItemGroup>

</Project>


[root@cpzljc ccjyapp]# dotnet ef migrations list

[root@cpzljc ccjyapp]# dotnet ef database update


[root@cpzljc Migrations]# cat 00000000000000_CreateIdentitySchema.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ccjyapp.Migrations
{
    /// <inheritdoc />
    public partial class CreateIdentitySchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "varchar(150)", maxLength: 150, nullable: false),
                    UserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "varchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    PasswordHash = table.Column<string>(type: "TEXT", nullable: true),
                    SecurityStamp = table.Column<string>(type: "TEXT", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumber = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    RoleId = table.Column<string>(type: "varchar(150)", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "varchar(150)", nullable: false),
                    ProviderKey = table.Column<string>(type: "varchar(150)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "TEXT", nullable: true),
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    RoleId = table.Column<string>(type: "varchar(150)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "varchar(150)", nullable: false),
                    LoginProvider = table.Column<string>(type: "varchar(150)", nullable: false),
                    Name = table.Column<string>(type: "varchar(150)", nullable: false),
                    Value = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}

[root@cpzljc Migrations]# cat 00000000000000_CreateIdentitySchema.Designer.cs 
// <auto-generated />
using System;
using ccjyapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ccjyapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("00000000000000_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ccjyapp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


[root@cpzljc Migrations]# cat ApplicationDbContextModelSnapshot.cs 
// <auto-generated />
using System;
using ccjyapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ccjyapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ccjyapp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ccjyapp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

[root@cpzljc ccjyapp]# dotnet ef migrations add add_MotorParameter

[root@cpzljc ccjyapp]# dotnet ef database update


[root@cpzljc Components]# cat _Imports.razor 
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor.StaticInput
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using MudBlazor
@using MudBlazor.Services
@using ccjyapp
@using ccjyapp.Components
@using ccjyapp.Data
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using QRCoder


[root@cpzljc ccjyapp]# dotnet add package QRCoder


[root@cpzljc Components]# cat App.razor 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="icon" type="image/ico" href="favicon.ico" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/Extensions.MudBlazor.StaticInput/NavigationObserver.js"></script>
    <script src="printing.js"></script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : InteractiveServer;
}


[root@cpzljc wwwroot]# cat printing.js 
function printContent(element, dotnetHelper) {
    var printWindow = window.open('', '_blank');
    printWindow.document.write(element.innerHTML);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();

    // 清理对Blazor对象的引用，如果需要的话
    dotnetHelper.dispose();
}


[root@cpzljc Data]# cat FloatToHexConverter.cs 
using System;

namespace ccjyapp.Data ;

public class FloatToHexConverter
{
    public static string FloatToHexString(float value)
    {
        byte[] bytes = BitConverter.GetBytes(value);
        string hex = BitConverter.ToString(bytes).Replace("-", "");
        return hex;
    }
}


[root@cpzljc Data]# cat Base64EncodingUtil.cs 
using System;

public class Base64EncodingUtil
{
    public static string EncodeToBase64(string input)
    {
        // 将字符串转换为字节数组
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input);

        // 对字节数组进行Base64编码
        string base64String = Convert.ToBase64String(bytes);

        return base64String;
     }

    public static string EncodeHexStringToBase64(string input)
    {
        // 假设input是一个42字节长的16进制字符串
        byte[] bytes = FromHexStringToByteArray(input);

        // 使用Base64进行编码
        string base64EncodedString = Convert.ToBase64String(bytes);

        return base64EncodedString;
    }

    private static byte[] FromHexStringToByteArray(string hexString)
    {
        if (hexString.Length % 2 != 0)
            throw new ArgumentException(hexString);

        byte[] bytes = new byte[hexString.Length / 2];
        for (int i = 0; i < bytes.Length; i++)
            bytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
        return bytes;
    }
}


[root@cpzljc ccjyapp]# cat appsettings.Development.json 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "Kestrel": {
    "Endpoints": {
      "MyHttpEndpoint": {
        "Url": "http://1.26:5026"
      }
    }
  }
}


[root@cpzljc ccjyapp]# cat appsettings.json 
{
  "ConnectionStrings": {
    "DefaultConnection": "DataSource=Data\\app.db;Cache=Shared"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Kestrel": {
    "Endpoints": {
      "MyHttpEndpoint": {
        "Url": "http://1.26:5027"
      }
    }
  }
}





12、 ABP Framework
https://github.com/abpframework/abp
https://abp.io/

1589918482@qq.com yuanxw Yuan1877008@ 

[root@cpzljc aspnetcore]# dotnet tool install -g Volo.Abp.Studio.Cli
可使用以下命令调用工具: abp
已成功安装工具“volo.abp.studio.cli”(版本“0.9.11”)。

[root@cpzljc aspnetcore]# abp new Jt.CcjyApp -u blazor-server -dbms MySQL -m none --theme leptonx-lite -csf

[root@cpzljc Jt.CcjyApp]# dotnet --version
8.0.301



13、 :set number   vim中显示行号
     vim  编辑文件
	 :wq  保存文件
	 :q!  强制退出
	 ls -a  显示隐藏文件   比如.swap文件
	 ls -lh  列表显示时间、大小
	 
14、 QRCoder
https://github.com/codebude/QRCoder	 

aspnetcore blazor mudblazor生成二维码
在ASP.NET Core Blazor项目中使用MudBlazor生成二维码，你可以使用第三方库如QRCoder来生成二维码图像，然后在Blazor组件中显示它。以下是一个简单的示例：
首先，安装QRCoder库：
dotnet add package QRCoder
然后，创建一个Blazor组件来生成并显示二维码。


15、 ant-design-blazor  
https://github.com/ant-design-blazor/ant-design-blazor
https://antblazor.com/zh-CN/
https://github.com/ant-design-blazor/ant-design-pro-blazor

[root@cpzljc aspnetcore]# dotnet new --install AntDesign.Templates

[root@cpzljc aspnetcore]# dotnet new antdesign -o ccjyapp --host server --full true

[root@cpzljc Properties]# cat launchSettings.json 
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:53775",
      "sslPort": 44358
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "ccjyapp": {
      "commandName": "Project",
      "dotnetRunMessages": "true",
      "launchBrowser": true,
      "applicationUrl": "http://1.26:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


aspnetcore float类型转换为16进制
在ASP.NET Core中，将float类型转换为16进制字符串可以通过BitConverter.GetBytes方法和String.Format方法来实现。以下是一个示例代码：
using System;
 
public class FloatToHexConverter
{
    public static string FloatToHexString(float value)
    {
        byte[] bytes = BitConverter.GetBytes(value);
        string hex = BitConverter.ToString(bytes).Replace("-", "");
        return hex;
    }
}
 
// 使用示例
public class Program
{
    public static void Main()
    {
        float floatValue = 123.456f;
        string hexValue = FloatToHexConverter.FloatToHexString(floatValue);
        Console.WriteLine(hexValue); // 输出floatValue的16进制表示
    }
}
这段代码定义了一个FloatToHexConverter类，其中包含一个将float转换为16进制字符串的静态方法FloatToHexString。
Main方法中演示了如何使用这个转换器，并打印出转换结果。BitConverter.GetBytes方法用于获取指定浮点数的字节表示，
BitConverter.ToString方法用于将字节数组转换为人类可读的16进制字符串，最后通过Replace方法移除字符串中的分隔符。


aspnetcore 对字符串进行BASE64编码
在ASP.NET Core中，您可以使用内置的Convert.ToBase64String方法对字符串进行BASE64编码。以下是一个简单的示例：
using System;
 
public class Base64EncodingUtil
{
    public static string EncodeToBase64(string input)
    {
        // 将字符串转换为字节数组
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input);
        
        // 对字节数组进行Base64编码
        string base64String = Convert.ToBase64String(bytes);
        
        return base64String;
    }
}


aspnetcore 42个字节的16进制字符串进行BASE64编码
在ASP.NET Core中，你可以使用内置的Base64编码和解码方法来处理16进制字符串。首先，你需要将16进制字符串转换为字节数组，然后使用Base64进行编码。以下是一个简单的例子：
using System;
using System.Text;
 
public class Base64EncodingExample
{
    public static void Main(string[] args)
    {
        // 假设有一个42字节长的16进制字符串
        string hexString = "8d969eef6ecad3d6a345e63b4b8d6082..."; // 这里应该是完整的42字节字符串
        byte[] bytes = FromHexStringToByteArray(hexString);
 
        // 使用Base64进行编码
        string base64EncodedString = Convert.ToBase64String(bytes);
 
        Console.WriteLine(base64EncodedString);
    }
 
    private static byte[] FromHexStringToByteArray(string hexString)
    {
        if (hexString.Length % 2 != 0)
            throw new ArgumentException(hexString);
 
        byte[] bytes = new byte[hexString.Length / 2];
        for (int i = 0; i < bytes.Length; i++)
            bytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
        return bytes;
    }
}
请确保你的16进制字符串是有效的，并且确实是42字节长度。如果字符串长度不是42字节，你需要相应地调整代码。上述代码中的FromHexStringToByteArray方法会将16进制字符串转换为字节数组，然后Convert.ToBase64String方法会对这个字节数组进行Base64编码。

16、 Vscode 修改终端字体大小
左下角，齿轮设置->Settings->搜索栏输入“fontsize”->Terminal, 设置字体大小。


17、 aspnetcore blazor 打印功能
在ASP.NET Core Blazor应用程序中添加打印功能，可以通过JavaScript Interop来实现。以下是一个简单的示例，展示了如何在Blazor组件中调用JavaScript函数来打开新的浏览器标签页，并在其中打印指定元素的内容。

首先，在Blazor组件中使用@inject注入JavaScript Runtime，然后定义一个C#方法来调用JavaScript函数。

@inject IJSRuntime JSRuntime
 
@code {
    private async Task PrintContent(ElementReference elementReference)
    {
        var jsObjectRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("printContent", elementReference, jsObjectRef);
    }
 
    public void Dispose()
    {
        // 注意：在Blazor Server中，可能需要清理JavaScript对象的引用
    }
}
然后，在JavaScript部分定义printContent函数：
function printContent(element, dotnetHelper) {
    var printWindow = window.open('', '_blank');
    printWindow.document.write(element.innerHTML);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();
    
    // 清理对Blazor对象的引用，如果需要的话
    dotnetHelper.dispose();
}
在HTML中，你可以通过传递某个元素的引用来触发打印功能：
<button @onclick="() => PrintContent(myElement)">打印</button>
<div ref="myElement">
    <!-- 需要打印的内容 -->
</div>
确保在Blazor应用程序的wwwroot文件夹中的index.html或_host.cshtml中引入JavaScript文件：
<script src="your-path/printing.js"></script>
请注意，这个示例假设你的JavaScript文件名为printing.js，并且该文件位于wwwroot目录下。你需要根据实际情况调整文件路径。

这个示例展示了如何在Blazor组件中调用JavaScript代码来打印页面内容。对于更复杂的打印需求，可能需要额外的处理，例如处理CSS和JavaScript的打印样式等。


18、 centos8修改系统时间
在CentOS 8上修改系统时间可以使用timedatectl命令。以下是步骤和示例代码：

查看当前时间和时区：
timedatectl status

列出所有可用时区：
timedatectl list-timezones

设置时间和时区：
sudo timedatectl set-time 'YYYY-MM-DD HH:MM:SS'
sudo timedatectl set-timezone Your/Timezone
将YYYY-MM-DD HH:MM:SS替换为你想要设置的日期和时间，Your/Timezone替换为你的时区。

例如，将时间设置为2023年4月1日10点15分，时区设置为Asia/Shanghai：
sudo timedatectl set-time '2023-04-01 10:15:00'
sudo timedatectl set-timezone Asia/Shanghai

确保你有管理员权限来修改系统时间。如果你需要立即更新硬件时钟，可以使用--adjust-system-clock选项：
sudo timedatectl set-time '2023-04-01 10:15:00' --adjust-system-clock


19、 网络
PS C:\Users\Administrator> ssh admin@192.168.100.108      
admin@192.168.100.108's password: 
******************************************************************************
* Copyright (c) 2004-2021 New H3C Technologies Co., Ltd. All rights reserved.*
* Without the owner's prior written consent,                                 *
* no decompiling or reverse-engineering shall be allowed.                    *
******************************************************************************

<gaoya-chejian-SW-192.168.100.108>sys
System View: return to User View with Ctrl+Z.
[gaoya-chejian-SW-192.168.100.108]dis mac-add | in 3c1b
e0d5-5eff-3c1b   108        Learned          GE1/0/12                 Y
[gaoya-chejian-SW-192.168.100.108]

查看端口在线情况
<gaoya-chejian-SW-192.168.100.108>dis inter brief


20、 微服务
安装 .NET SDK
PS C:\Users\Administrator> dotnet --version
8.0.403

创建服务
PS D:\> dotnet new webapi -o MyMicroservice --no-https

运行服务
PS D:\MyMicroservice> dotnet run
正在生成...
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://localhost:5182
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Development
info: Microsoft.Hosting.Lifetime[0]
      Content root path: D:\MyMicroservice
	  
http://localhost:5182/weatherforecast 

安装 Docker
https://www.docker.com/
默认情况下，Docker 将在 Windows 上使用 Linux 容器。保留安装程序中提示时的配置设置。
PS D:\MyMicroservice> docker --version
Docker version 27.3.1, build ce12230

/*
添加 Docker 元数据
PS D:\> cd MyMicroservice
添加 DockerFile
PS D:\MyMicroservice> fsutil file createnew Dockerfile 0   
已创建文件 D:\MyMicroservice\Dockerfile

然后，可以手动或使用此命令在喜欢的文本编辑器中打开它:
PS D:\MyMicroservice> vim .\Dockerfile 
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY MyMicroservice.csproj .
RUN dotnet restore
COPY . .
RUN dotnet publish -c release -o /app

FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=build /app .
ENTRYPOINT ["dotnet", "MyMicroservice.dll"]

注意: 请确保将文件命名为 Dockerfile，而非Dockerfile.txt 或其他名称。

可选: 添加 .dockerignore 文件
PS D:\MyMicroservice> fsutil file createnew .dockerignore 0
已创建文件 D:\MyMicroservice\.dockerignore

然后，可以手动或使用此命令在喜欢的文本编辑器中打开它:
PS D:\MyMicroservice> vim .\.dockerignore
Dockerfile
[b|B]in
[O|o]bj

创建 Docker 映像
PS D:\MyMicroservice> docker build -t mymicroservice .
*/

发布映像
PS D:\MyMicroservice> dotnet publish -t:PublishContainer
  正在确定要还原的项目…
  所有项目均是最新的，无法还原。
  MyMicroservice -> D:\MyMicroservice\bin\Release\net8.0\MyMicroservice.dll
  MyMicroservice -> D:\MyMicroservice\bin\Release\net8.0\publish\
  在基本映像“mcr.microsoft.com/dotnet/aspnet:8.0”顶部构建标记为“latest”的映像“mymicroservice”。
  已将图像“mymicroservice:latest”推送到 使用“docker”的本地注册表。

可以运行以下命令，以查看计算机上可用的所有映像的列表，包括刚刚创建的映像。  
PS D:\MyMicroservice> docker images
REPOSITORY       TAG       IMAGE ID       CREATED          SIZE
mymicroservice   latest    91bbed7bda71   26 minutes ago   220MB

运行 Docker 映像
PS D:\MyMicroservice> docker run -it --rm -p 3000:8080 --name mymicroservicecontainer mymicroservice
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://[::]:8080
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
      Content root path: /app
可以浏览到以下 URL 以访问在容器中运行的应用程序: http://localhost:3000/weatherforecast

可以使用以下命令查看在单独的命令提示符中运行的容器:	
PS C:\Users\Administrator> docker ps
CONTAINER ID   IMAGE            COMMAND                   CREATED         STATUS         PORTS                    NAMES
80e4b30eec37   mymicroservice   "dotnet MyMicroservi…"   2 minutes ago   Up 2 minutes   0.0.0.0:3000->8080/tcp   mymicroservicecontainer

列出所有的容器，无论是正在运行的还是已经停止的:
[root@cpzljc dockerimages]# docker ps -a

PS C:\Users\Administrator> docker kill 80e4b30eec37
80e4b30eec37

将镜像保存为文件：
PS C:\Users\Administrator> docker save mymicroservice > mymicroservice.tar

将mymicroservice.tar文件传输到CentOS系统：  
PS C:\Users\Administrator> scp -P 1225 C:/Users/Administrator/mymicroservice.tar root@1.26:/opt/aspnetcore/dockerimages/
root@1.26's password:
mymicroservice.tar                             100%  213MB  11.2MB/

在CentOS上加载镜像：
[root@cpzljc dockerimages]# docker load < /opt/aspnetcore/dockerimages/mymicroservice.tar

运行容器：
[root@cpzljc dockerimages]# docker run -it --rm -p 3000:8080 --name mymicroservicecontainer mymicroservice
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://[::]:8080
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
      Content root path: /app

让docker容器具有自启动功能：	  
[root@cpzljc dockerimages]# docker run -it --restart always  -p 3000:8080 --name mymicroservicecontainer mymicroservice
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://[::]:8080
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
      Content root path: /app
^Cinfo: Microsoft.Hosting.Lifetime[0]
      Application is shutting down...
[root@cpzljc dockerimages]# docker ps
CONTAINER ID   IMAGE            COMMAND                   CREATED          STATUS         PORTS                                       NAMES
c8397fb8dda6   mymicroservice   "dotnet MyMicroservi…"   30 seconds ago   Up 7 seconds   0.0.0.0:3000->8080/tcp, :::3000->8080/tcp   mymicroservicecontainer	  

centos8编辑网络配置文件:
[root@cpzljc /]# cd /etc/sysconfig/network-scripts/
[root@cpzljc network-scripts]# ls
ifcfg-ens192
[root@cpzljc network-scripts]# vim ifcfg-ens192
[root@cpzljc network-scripts]# cat ifcfg-ens192 
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME=ens192
UUID=a73dac2f-c1b1-4fe2-a662-60a4bec7becf
DEVICE=ens192
ONBOOT=yes
IPADDR=1.26
NETMASK=255.255.254.0
GATEWAY=1.1
DNS1=90.68
[root@cpzljc network-scripts]# systemctl restart NetworkManager

centos8 安装docker：
CentOS 8 自 2021 年年底起已不再支持，但如果您需要在 CentOS 8 上安装 Docker，可以按照以下步骤操作：
移除旧版本的 Docker（如果有）：
sudo dnf remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-latest \
                docker-latest-logrotate \
                docker-logrotate \
                docker-engine
安装 Docker 依赖的软件包：
[root@cpzljc docker]# sudo dnf install -y dnf-plugins-core
警告：加载 '/etc/yum.repos.d/CentOS-Base.repo' 失败，跳过。
CentOS-8.5.2111 - Base - mirrors.aliyun.com                                                                                                                                101 kB/s | 3.9 kB     00:00    
CentOS-8.5.2111 - Extras - mirrors.aliyun.com                                                                                                                               64 kB/s | 1.5 kB     00:00    
CentOS-8.5.2111 - PowerTools - mirrors.aliyun.com                                                                                                                           47 kB/s | 4.3 kB     00:00    
CentOS-8.5.2111 - AppStream - mirrors.aliyun.com                                                                                                                           141 kB/s | 4.3 kB     00:00    
Extra Packages for Enterprise Linux 8 - x86_64                                                                                                                              51 kB/s |  17 kB     00:00    
Extra Packages for Enterprise Linux 8 - x86_64                                                                                                                             1.0 MB/s |  14 MB     00:13     
packages-microsoft-com-prod                                                                                                                                                5.0 kB/s | 1.5 kB     00:00    
nginx stable repo                                                                                                                                                          3.0 kB/s | 2.9 kB     00:00    
nginx stable repo                                                                                                                                                           56 kB/s |  71 kB     00:01     
created by dnf config-manager from https://packages.microsoft.com/yumrepos/vscode                                                                                          5.0 kB/s | 1.5 kB     00:00    
created by dnf config-manager from https://packages.microsoft.com/yumrepos/vscode                                                                                          1.2 MB/s | 6.7 MB     00:05     
软件包 dnf-plugins-core-4.0.21-3.el8.noarch 已安装。
依赖关系解决。
无需任何处理。
完毕！
设置 Docker 的官方仓库：
[root@cpzljc docker]# sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
警告：加载 '/etc/yum.repos.d/CentOS-Base.repo' 失败，跳过。
添加仓库自：https://download.docker.com/linux/centos/docker-ce.repo
安装 Docker Engine（社区版）：
[root@cpzljc docker]# sudo dnf install -y docker-ce docker-ce-cli containerd.io
注：因为runc包版本冲突，安装container.io会下载podman包，podman包依赖runc包，runc包要>=1.0.0-57，跟centos8里的runc版本冲突，所以首先把runc包删除，然后重装container.io。
[root@cpzljc docker]# sudo dnf remove runc
[root@cpzljc docker]# which runc
/usr/bin/which: no runc in (/root/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.dotnet/tools:/root/bin:/usr/lib/oracle/11.2/client64/bin:/root/bin)

启动 Docker 服务：
[root@cpzljc docker]# sudo systemctl start docker
使 Docker 服务开机自启：
[root@cpzljc docker]# sudo systemctl enable docker
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.
验证 Docker 安装是否成功：
[root@cpzljc docker]# docker --version
Docker version 26.1.3, build b72abbb


21、  
